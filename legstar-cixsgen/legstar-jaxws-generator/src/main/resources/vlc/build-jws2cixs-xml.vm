<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     Generate a Jaxws web service as an adapter for a mainframe program.
     Artifacts can be used to call a remote Mainframe function.
     Prerequisite: Cobol binding classes should have been generated
     using Coxbgen prior to using this script.
     Refer to http://www.legsem.com/legstar for info on generating binding classes.
  -->
<project basedir="${antModel.productLocation}" default="signalSuccess" name="generate-jaxws2cixs">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">
    
        <!-- Classpath setting -->
        <path id="classpath">
            <pathelement location="${antModel.jaxbBinDir}"/>
            <pathelement location="${antModel.coxbBinDir}"/>
            <pathelement location="${antModel.custBinDir}"/>
            <fileset dir="${basedir}" includes="lib/*.jar" />
        </path>
        
        <!-- Web Service Adapter Generator ant task -->
        <taskdef name="jaxws2cixsgen"
            classname="com.legstar.cixs.jaxws.gen.Jaxws2CixsGenerator"
            classpathref="classpath" 
        /> 
    
    </target>

    <!-- ===========================================================  -->
    <!-- This step creates all the artifacts for a service.  -->
    
    <target name="generateJaxws2Cixs" depends="init">
    
        <jaxws2cixsgen targetSrcDir="${antModel.targetSrcDir}"
            targetBinDir="${antModel.targetBinDir}"
            targetWDDDir="${antModel.targetWDDDir}"
            targetDistDir="${antModel.targetDistDir}"
            targetAntDir="${antModel.targetAntDir}"
            targetWarDir="${antModel.targetWarDir}"
            jaxbBinDir="${antModel.jaxbBinDir}"
            coxbBinDir="${antModel.coxbBinDir}"
            custBinDir="${antModel.custBinDir}"
            hostCharset="${antModel.hostCharset}"
#if(${antModel.noPackageInfo})
            noPackageInfo="${antModel.noPackageInfo}"
#end
        >
            <cixsJaxwsService name="${antModel.cixsJaxwsService.name}"
                packageName="${antModel.cixsJaxwsService.packageName}"
            >
#foreach ($cixsOperation in $antModel.cixsJaxwsService.cixsOperations)
                <cixsOperation name="${cixsOperation.name}"
                    cicsProgramName="${cixsOperation.cicsProgramName}"
#if(!${helper.isEmpty(${cixsOperation.cicsChannel})})
                    cicsChannel="${cixsOperation.cicsChannel}"
#end
                >
#foreach ($cixsStructure in $cixsOperation.input)
                    <input
                        jaxbType="${cixsStructure.jaxbType}"
                        jaxbPackageName="${cixsStructure.jaxbPackageName}"
#if ($cixsStructure.cicsContainer)
                        cicsContainer="${cixsStructure.cicsContainer}"
#end
                    />
#end
#foreach ($cixsStructure in $cixsOperation.output)
                    <output
                        jaxbType="${cixsStructure.jaxbType}"
                        jaxbPackageName="${cixsStructure.jaxbPackageName}"
#if ($cixsStructure.cicsContainer)
                        cicsContainer="${cixsStructure.cicsContainer}"
#end
                    />
#end
                </cixsOperation>
#end
            </cixsJaxwsService>
            <!-- Exposed Web Service parameters -->
            <webServiceParameters
                wsdlTargetNamespace="${antModel.webServiceParameters.wsdlTargetNamespace}"
                wsdlServiceName="${antModel.webServiceParameters.wsdlServiceName}"
                wsdlPortName="${antModel.webServiceParameters.wsdlPortName}"
            />
        </jaxws2cixsgen>
    
    </target>
   
    <!-- ===========================================================  -->
    <!-- Compile the generated service classes
    -->
    <target name="compileJaxws2Cixs" depends="generateJaxws2Cixs">
        <mkdir dir="${antModel.targetBinDir}"/>
        <javac srcdir="${antModel.targetSrcDir}"
            includes="**/*.java"
            destdir="${antModel.targetBinDir}"
            classpathref="classpath"
            fork="yes"
        />
    </target>
  
    <!-- ===========================================================  -->
    <!-- Delete the probe file to signal success
    -->
    <target name="signalSuccess" depends="compileJaxws2Cixs">
        <delete file="${antModel.probeFile}" quiet="true"/>
    </target>
  
</project>