##/////////////////////////////////////////////////////////////////////
##Jaxws Wrapper classes JAXB ObjectFactory Velocity Template.
##@author Fady
##/////////////////////////////////////////////////////////////////////
## ==================================================================
## Create unique Lists of imports and Types
##
#set($importTypes = [])
#set($jaxbTypes = [])
#foreach ($cixsOperation in $model.cixsOperations)
##
## if operations are in a different package than the service, we
## need to import the operation classes as well
##
#if($cixsOperation.packageName && $cixsOperation.packageName != $model.packageName)
#set($newType = ${helper.getQualClassName(${cixsOperation.packageName}, ${cixsOperation.faultInfoType})})
#addUnique($importTypes $newType)
#if($cixsOperation.getInput().size() > 0)
#set($newType = ${helper.getQualClassName(${cixsOperation.packageName}, ${cixsOperation.requestWrapperType})})
#addUnique($importTypes $newType)
#end
#if($cixsOperation.getOutput().size() > 0)
#set($newType = ${helper.getQualClassName(${cixsOperation.packageName}, ${cixsOperation.responseWrapperType})})
#addUnique($importTypes $newType)
#end
#if($cixsOperation.getInput().size() > 1)
#set($newType = ${helper.getQualClassName(${cixsOperation.packageName}, ${cixsOperation.requestHolderType})})
#addUnique($importTypes $newType)
#end
#if($cixsOperation.getOutput().size() > 1)
#set($newType = ${helper.getQualClassName(${cixsOperation.packageName}, ${cixsOperation.responseHolderType})})
#addUnique($importTypes $newType)
#end
#end
#end
## ==================================================================
#parse("vlc/j2c-service-common-package.vm")

import javax.xml.bind.annotation.XmlRegistry;
#foreach($importType in $importTypes)
import ${importType};
#end

/**
 * A JAXB ObjectFactory for wrapper classes.
 *
 */
@XmlRegistry
public class ObjectFactory {


    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes
     * for package: ${model.packageName}.
     * 
     */
    public ObjectFactory() {
    }

    /**
     * @return an instance of {@link ${model.headerClassName} }
     * 
     */
    public ${model.headerClassName} create${model.headerClassName}() {
        return new ${model.headerClassName}();
    }

#foreach ($cixsOperation in $model.cixsOperations)
#if($cixsOperation.getInput().size() > 0)
    /**
     * @return an instance of {@link ${cixsOperation.requestWrapperType} }
     * 
     */
    public ${cixsOperation.requestWrapperType} create${cixsOperation.requestWrapperType}() {
        return new ${cixsOperation.requestWrapperType}();
    }
#end

#if($cixsOperation.getOutput().size() > 0)
    /**
     * @return an instance of {@link ${cixsOperation.responseWrapperType} }
     * 
     */
    public ${cixsOperation.responseWrapperType} create${cixsOperation.responseWrapperType}() {
        return new ${cixsOperation.responseWrapperType}();
    }
#end

#if($cixsOperation.getInput().size() > 1)
    /**
     * @return an instance of {@link ${cixsOperation.requestHolderType} }
     * 
     */
    public ${cixsOperation.requestHolderType} create${cixsOperation.requestHolderType}() {
        return new ${cixsOperation.requestHolderType}();
    }
#end

#if($cixsOperation.getOutput().size() > 1)
    /**
     * @return an instance of {@link ${cixsOperation.responseHolderType} }
     * 
     */
    public ${cixsOperation.responseHolderType} create${cixsOperation.responseHolderType}() {
        return new ${cixsOperation.responseHolderType}();
    }

#end
    /**
     * @return an instance of {@link ${cixsOperation.faultInfoType} }
     * 
     */
    public ${cixsOperation.faultInfoType} create${cixsOperation.faultInfoType}() {
        return new ${cixsOperation.faultInfoType}();
    }
#end

}
