package com.legstar.test.cixs.redmulti;
import java.rmi.server.UID;
import javax.jws.WebService;

import com.legstar.coxb.transform.HostTransformException;
import com.legstar.host.invoke.AbstractServiceAdapter;
import com.legstar.host.invoke.HostInvokerException;
import com.legstar.messaging.LegStarAddress;
import com.legstar.test.coxb.redmulti.Dfhcommarea;

/**
 * JAX-WS Service Adapter implementation.
 * Each method maps to a CICS program. 
 * 
 * This class was generated by LegStar Mainframe Web Service adapter generator.
 */
@WebService(endpointInterface = "com.legstar.test.cixs.redmulti.Redmulti",
            serviceName = "redmultiService",
            portName = "redmultiPort",
            targetNamespace = "http://cixs.test.legstar.com/redmulti")
public class RedmultiImpl extends AbstractServiceAdapter implements Redmulti {

    /** Name of this service adapter implementation. */
    private static final String  SERVICE_ADAPTER_NAME = "redmulti";

    /** Invoker implementation for operation redmulti. */
    private RedmultiProgramInvoker mRedmultiProgramInvoker;

    /** Contructor creates a set of operation invokers. */
    public RedmultiImpl() {
        super(SERVICE_ADAPTER_NAME);
        mRedmultiProgramInvoker = new RedmultiProgramInvoker(getConfigFileName());
    }
    
    /** {@inheritDoc} */
    public Dfhcommarea redmulti(
               final Dfhcommarea request,
               final RedmultiHostHeader hostHeader)
               throws RedmultiFault {
    
        try {
            return getRedmultiProgramInvoker().redmulti(
                    getAddress(hostHeader), getRequestID(hostHeader), request);
        } catch (HostInvokerException e) {
            throw getRedmultiFault(e, "Failed to invoke host program:");
        } catch (HostTransformException e) {
            throw getRedmultiFault(e, "Failed to transform data:");
        }
    }

    /**
     * Formats a fault element to notify client of an exception.
     *
     * @param e the exception which occurred
     * @param text short message describing the context
     * @return the fault exception
     */
    public RedmultiFault getRedmultiFault(
            final Exception e, final String text) {

        RedmultiFaultInfo faultInfo = new RedmultiFaultInfo();
        faultInfo.setMessage(e.getMessage());
        faultInfo.setDetail(getRedmultiProgramInvoker().toString());
        return new RedmultiFault(text + ' ' 
                + faultInfo.getMessage(), faultInfo, e);
    }

        
    /**
     * Extracts header data from SOAP header and create a host address.
     * @param hostHeader the java object mapping the SOAP header element
     * @return the new host address
     */
    public LegStarAddress getAddress(
            final RedmultiHostHeader hostHeader) {
        if (hostHeader == null) {
            return null;
        }
        LegStarAddress address = new LegStarAddress(hostHeader.getHostEndPoint());
        address.setHostCharset(hostHeader.getHostCharset());
        address.setHostUserID(hostHeader.getHostUserID());
        address.setHostPassword(hostHeader.getHostPassword());
        address.setHostTraceMode(hostHeader.getHostTraceMode());
        return address;
    }

    /**
     * Generates a unique ID for a request. This can be passed from the client
     * using the host header.
     * @param hostHeader the java object mapping the SOAP header element
     * @return  a unique request ID
     */
    public String getRequestID(final RedmultiHostHeader hostHeader) {
        if (hostHeader != null && hostHeader.getHostRequestID() != null) {
            return hostHeader.getHostRequestID();
        } else {
            return getServiceAdapterName() + ":" + new UID().toString();
        }
    }

    /**
     * @return the invoker implementation for operation redmulti
     */
    public RedmultiProgramInvoker getRedmultiProgramInvoker() {
        return mRedmultiProgramInvoker;
    }

    /**
     * @param programInvoker the invoker implementation for operation redmulti to set
     */
    public void setRedmultiProgramInvoker(
            final RedmultiProgramInvoker programInvoker) {
        mRedmultiProgramInvoker = programInvoker;
    }
    
}
