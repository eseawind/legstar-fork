<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="coxbgen-using-ant-generator-adapter">
<title>COBOL Transformers Generation for an Adapter</title>
<para>
  You can use the <emphasis>build-coxb.xml</emphasis> ant script from the
  samples/quickstarts/adapter_lsfileae folder
  as your starting point. It generates Transformers for the LSFILEAE COBOL program which
  takes the same input and output structure called Dfhcommarea.
</para>

<para>
  Generally, there are 4 things you will need to change in <emphasis>build-coxb.xml</emphasis>
  in order to adapt it to your needs:
</para>
<itemizedlist>
<listitem>
<para>
  Make sure the classpath setting is correct. The fileset should point to the location
  where you installed LegStar.
</para>
</listitem>
<listitem>
<para>
  The xsdFile parameter of the jaxbgen ant task must point to the location of you XML Schema
  with COBOL annotations.
</para>
</listitem>
<listitem>
<para>
  The jaxbPackageName parameter, for both jaxbgen and coxbgen ant tasks, must be set to the same value
  conforming to your naming standards.
</para>
</listitem>
<listitem>
<para>
  The jaxbRootClass parameter of the coxbgen ant task must designate one, or more, JAXB classes
  that you want to turn into Transformers.
</para>
</listitem>
</itemizedlist>

<para>
  <emphasis>build-coxb.xml</emphasis> executes 3 steps (or targets in ant parlance):
</para>
<itemizedlist>
<listitem>
<para>
  The first target, generateJAXB, runs the jaxbgen ant task and turns an XML Schema
  with COBOL annotations into JAXB classes with COBOL annotations.
</para>
<para>
  For a complete list of options for the jaxbgen task, you can refer to
  <ulink url="http://www.legsem.com/legstar/legstar-core/legstar-jaxbgen/apidocs/com/legstar/jaxb/gen/CobolJAXBGenerator.html">CobolJAXBGenerator</ulink>.
</para>
</listitem>
<listitem>
<para>
  The second target, compileJAXB, is a regular java compilation step for the JAXB classes
  previously generated.
</para>
</listitem>
<listitem>
<para>
  The third target, generateCOXB, runs the coxbgen ant task and produces the actual Transformers.
  The generation process reflects on the JAXB classes compiled at the previous step.
</para>
<para>
  You will notice that the coxbgen ant task takes one or more jaxbRootClass elements. These
  are needed to designate which JAXB class (or classes) should become a Transformer. You
  would generally pickup the higher classes in the hierarchy but you don't have to.
</para>
<para>
  By default you get Java to Host Transformers only. In addition, you can get Host to XML
  and Host to JSON Transformers (use the xmlTransformers and jsonTransformers options).
</para>
<para>
  For a complete list of options for the jaxbgen task, you can refer to
  <ulink url="http://www.legsem.com/legstar/legstar-core/legstar-coxbgen/apidocs/com/legstar/coxb/gen/CoxbBindingGenerator.html">CoxbBindingGenerator</ulink>.
</para>
</listitem>
</itemizedlist>
<para>
  The <link linkend="coxbgen-using-transformers">Using generated tranformers</link> section gives examples
  of code you could write to run Transformers.
</para>

</section>
