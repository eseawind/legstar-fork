<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="coxbgen-using-eclipse-generator-adapter">
<title>COBOL Transformers Generation for an Adapter</title>
<para>
  The wizard is started from the package explorer, by right clicking on the previously generated XML Schema: 
</para>
<figure>
<title>Adapter COBOL Transformers generation menu</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/eclipse-screen-shot-adapter-cobol-transformers-menu.jpg" format="JPG" scalefit="1" width="100%" contentdepth="100%"/>
</imageobject>
</mediaobject>
</figure>
<para>
  The next page allows you to specify which elements from the source XML Schema will need to be bound.
  All elements are displayed here but if you select a parent element, this will automatically select all
  children for you, so all you need to do is to select root elements: 
</para>
<figure>
<title>Adapter COBOL Transformers generation parameters screen</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/eclipse-screen-shot-adapter-cobol-transformers-parameters.jpg" format="JPG"  scalefit="1" width="100%" contentdepth="100%"/>
</imageobject>
</mediaobject>
</figure>
<para>
  In the Adapter case, the mainframe program expects a Dfhcommarea and also produces a Dfhcommarea so that’s the
  only element we need to select.
</para>
<para>
  The first options button allows you to customize the JAXB classes that will be generated.
</para>
<para>
  The second options button allows you to specify additional Transformers to be generated such as XML and JSON Transformers.
</para>
<para>
  When you click the finish button, an ant script with a name similar to
  build-coxb-CustomerService.xsd.xml is generated and launched. There are two different java packages that
  are generated by the ant script:
</para>
<itemizedlist>
<listitem>
<para>
  <emphasis>com.legstar.test.coxb.customerservice</emphasis> contains JAXB classes as generated by
  Sun’s JAXB XJC utility but with special COBOL annotations as shown on the next screen.
</para>
</listitem>
<listitem>
<para>
  <emphasis>com.legstar.test.coxb.customerservice.bind</emphasis> contains the Transformers classes
  that can be used for fast marshaling/unmarshaling. Using these classes, there is no need for
  reflection on the JAXB classes to get the COBOL meta-data at runtime.
</para>
</listitem>
</itemizedlist>
<figure>
<title>Adapter COBOL Transformers generation screen results</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/eclipse-screen-shot-adapter-cobol-transformers-result.jpg" format="JPG"  scalefit="1" width="100%" contentdepth="100%"/>
</imageobject>
</mediaobject>
</figure>
<para>
  The <link linkend="coxbgen-using-transformers">Using generated tranformers</link> section gives examples
  of code you could write to run Transformers.
</para>

</section>
