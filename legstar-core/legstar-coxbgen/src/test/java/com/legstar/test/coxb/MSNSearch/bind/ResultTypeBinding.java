


package com.legstar.test.coxb.MSNSearch.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.test.coxb.MSNSearch.DateTimeType;
import com.legstar.test.coxb.MSNSearch.AddressType;
import com.legstar.test.coxb.MSNSearch.LocationType;
import com.legstar.test.coxb.MSNSearch.ArrayOfSearchTagSearchTagsArrayType;
import com.legstar.test.coxb.MSNSearch.ImageType;
import com.legstar.test.coxb.MSNSearch.VideoType;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.MSNSearch.ResultType;
import com.legstar.test.coxb.MSNSearch.ObjectFactory;

/**
 * LegStar Binding for Complex element :
 *   ResultType.
 * 
 * This class was generated by LegStar Binding generator.
 */
public class ResultTypeBinding 
             extends CComplexBinding {

    /** Value object to which this cobol complex element is bound. */
    private ResultType mValueObject;
  
    /** Indicates that the associated Value object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedValueObject = false;
    
    /** Maximum host bytes size for this complex object. */
    private static final int BYTE_LENGTH = 1812;
    
    /** Child bound to value object property Title(String). */
    public ICobolStringBinding _title;
    /** Child bound to value object property Description(String). */
    public ICobolStringBinding _description;
    /** Child bound to value object property Url(String). */
    public ICobolStringBinding _url;
    /** Child bound to value object property DisplayUrl(String). */
    public ICobolStringBinding _displayUrl;
    /** Child bound to value object property CacheUrl(String). */
    public ICobolStringBinding _cacheUrl;
    /** Child bound to value object property Source(String). */
    public ICobolStringBinding _source;
    /** Child bound to value object property SearchTags(String). */
    public ICobolStringBinding _searchTags;
    /** Child bound to value object property Phone(String). */
    public ICobolStringBinding _phone;
    /** Child bound to value object property DateTime(DateTimeType). */
    public ICobolComplexBinding _dateTime;
    /** Child bound to value object property Address(AddressType). */
    public ICobolComplexBinding _address;
    /** Child bound to value object property Location(LocationType). */
    public ICobolComplexBinding _location;
    /** Child bound to value object property SearchTagsArray(ArrayOfSearchTagSearchTagsArrayType). */
    public ICobolComplexBinding _searchTagsArray;
    /** Child bound to value object property Summary(String). */
    public ICobolStringBinding _summary;
    /** Child bound to value object property ResultType(String). */
    public ICobolStringBinding _resultType;
    /** Child bound to value object property Image(ImageType). */
    public ICobolComplexBinding _image;
    /** Child bound to value object property Video(VideoType). */
    public ICobolComplexBinding _video;
            
    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
 
    /** Static reference to Value object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Value object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mValueObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound Value object.
     */
    public ResultTypeBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound Value object.
     * 
     * @param valueObject the concrete Value object instance bound to this
     *        complex element
     */
    public ResultTypeBinding(
            final ResultType valueObject) {
        this("", "", null, valueObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated Value object.
    * 
    * @param bindingName the identifier for this binding
    * @param fieldName field name in parent Value object
    * @param valueObject the concrete Value object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public ResultTypeBinding(
            final String bindingName,
            final String fieldName,
            final ICobolComplexBinding parentBinding,
            final ResultType valueObject) {
        
        super(bindingName, fieldName, ResultType.class, null, parentBinding);
        mValueObject = valueObject;
        if (mValueObject != null) {
            mUnusedValueObject = true;
        }
        initChildren();
        setByteLength(BYTE_LENGTH);
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding children instances */

        _title = BF.createStringBinding("Title",
               "Title", String.class, this);
        _title.setCobolName("R-Title");
        _title.setByteLength(32);
        _description = BF.createStringBinding("Description",
               "Description", String.class, this);
        _description.setCobolName("Description");
        _description.setByteLength(256);
        _url = BF.createStringBinding("Url",
               "Url", String.class, this);
        _url.setCobolName("Url");
        _url.setByteLength(32);
        _displayUrl = BF.createStringBinding("DisplayUrl",
               "DisplayUrl", String.class, this);
        _displayUrl.setCobolName("DisplayUrl");
        _displayUrl.setByteLength(32);
        _cacheUrl = BF.createStringBinding("CacheUrl",
               "CacheUrl", String.class, this);
        _cacheUrl.setCobolName("CacheUrl");
        _cacheUrl.setByteLength(32);
        _source = BF.createStringBinding("Source",
               "Source", String.class, this);
        _source.setCobolName("R-Source");
        _source.setByteLength(32);
        _searchTags = BF.createStringBinding("SearchTags",
               "SearchTags", String.class, this);
        _searchTags.setCobolName("SearchTags");
        _searchTags.setByteLength(32);
        _phone = BF.createStringBinding("Phone",
               "Phone", String.class, this);
        _phone.setCobolName("Phone");
        _phone.setByteLength(32);
        _dateTime = new DateTimeTypeBinding("DateTime",
               "DateTime", this, null);
        _dateTime.setCobolName("DateTime");
        _dateTime.setByteLength(24);
        _address = new AddressTypeBinding("Address",
               "Address", this, null);
        _address.setCobolName("R-Address");
        _address.setByteLength(224);
        _location = new LocationTypeBinding("Location",
               "Location", this, null);
        _location.setCobolName("Location");
        _location.setByteLength(24);
        _searchTagsArray = new ArrayOfSearchTagSearchTagsArrayTypeBinding("SearchTagsArray",
               "SearchTagsArray", this, null);
        _searchTagsArray.setCobolName("SearchTagsArray");
        _searchTagsArray.setByteLength(640);
        _summary = BF.createStringBinding("Summary",
               "Summary", String.class, this);
        _summary.setCobolName("Summary");
        _summary.setByteLength(32);
        _resultType = BF.createStringBinding("ResultType",
               "ResultType", String.class, this);
        _resultType.setCobolName("ResultType");
        _resultType.setByteLength(32);
        _image = new ImageTypeBinding("Image",
               "Image", this, null);
        _image.setCobolName("Image");
        _image.setByteLength(88);
        _video = new VideoTypeBinding("Video",
               "Video", this, null);
        _video.setCobolName("Video");
        _video.setByteLength(268);

        /* Add children to children list */
        getChildrenList().add(_title);
        getChildrenList().add(_description);
        getChildrenList().add(_url);
        getChildrenList().add(_displayUrl);
        getChildrenList().add(_cacheUrl);
        getChildrenList().add(_source);
        getChildrenList().add(_searchTags);
        getChildrenList().add(_phone);
        getChildrenList().add(_dateTime);
        getChildrenList().add(_address);
        getChildrenList().add(_location);
        getChildrenList().add(_searchTagsArray);
        getChildrenList().add(_summary);
        getChildrenList().add(_resultType);
        getChildrenList().add(_image);
        getChildrenList().add(_video);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public void createValueObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
        if (mUnusedValueObject && mValueObject != null) {
            mUnusedValueObject = false;
            return;
        }
        mValueObject = mValueObjectFactory.createResultType();
    }

    /** {@inheritDoc} */
    public void setChildrenValues() throws HostException {

         /* Make sure there is an associated Value object*/
        if (mValueObject == null) {
            createValueObject();
        }
        /* Get Value object property _title */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_title"
                    + " value=" + mValueObject.getTitle());
        }
        _title.setObjectValue(mValueObject.getTitle());
        /* Get Value object property _description */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_description"
                    + " value=" + mValueObject.getDescription());
        }
        _description.setObjectValue(mValueObject.getDescription());
        /* Get Value object property _url */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_url"
                    + " value=" + mValueObject.getUrl());
        }
        _url.setObjectValue(mValueObject.getUrl());
        /* Get Value object property _displayUrl */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_displayUrl"
                    + " value=" + mValueObject.getDisplayUrl());
        }
        _displayUrl.setObjectValue(mValueObject.getDisplayUrl());
        /* Get Value object property _cacheUrl */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_cacheUrl"
                    + " value=" + mValueObject.getCacheUrl());
        }
        _cacheUrl.setObjectValue(mValueObject.getCacheUrl());
        /* Get Value object property _source */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_source"
                    + " value=" + mValueObject.getSource());
        }
        _source.setObjectValue(mValueObject.getSource());
        /* Get Value object property _searchTags */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_searchTags"
                    + " value=" + mValueObject.getSearchTags());
        }
        _searchTags.setObjectValue(mValueObject.getSearchTags());
        /* Get Value object property _phone */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_phone"
                    + " value=" + mValueObject.getPhone());
        }
        _phone.setObjectValue(mValueObject.getPhone());
        /* Get Value object property _dateTime */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_dateTime"
                    + " value=" + mValueObject.getDateTime());
        }
        _dateTime.setObjectValue(mValueObject.getDateTime());
        /* Get Value object property _address */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_address"
                    + " value=" + mValueObject.getAddress());
        }
        _address.setObjectValue(mValueObject.getAddress());
        /* Get Value object property _location */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_location"
                    + " value=" + mValueObject.getLocation());
        }
        _location.setObjectValue(mValueObject.getLocation());
        /* Get Value object property _searchTagsArray */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_searchTagsArray"
                    + " value=" + mValueObject.getSearchTagsArray());
        }
        _searchTagsArray.setObjectValue(mValueObject.getSearchTagsArray());
        /* Get Value object property _summary */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_summary"
                    + " value=" + mValueObject.getSummary());
        }
        _summary.setObjectValue(mValueObject.getSummary());
        /* Get Value object property _resultType */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_resultType"
                    + " value=" + mValueObject.getResultType());
        }
        _resultType.setObjectValue(mValueObject.getResultType());
        /* Get Value object property _image */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_image"
                    + " value=" + mValueObject.getImage());
        }
        _image.setObjectValue(mValueObject.getImage());
        /* Get Value object property _video */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_video"
                    + " value=" + mValueObject.getVideo());
        }
        _video.setObjectValue(mValueObject.getVideo());
     }

    /** {@inheritDoc} */
    public void setPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        /* Set the Value object property value from binding object */
        Object bindingValue = null;
        switch (index) {
        case 0:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setTitle((String) bindingValue);
            break;
        case 1:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setDescription((String) bindingValue);
            break;
        case 2:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setUrl((String) bindingValue);
            break;
        case 3:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setDisplayUrl((String) bindingValue);
            break;
        case 4:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setCacheUrl((String) bindingValue);
            break;
        case 5:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setSource((String) bindingValue);
            break;
        case 6:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setSearchTags((String) bindingValue);
            break;
        case 7:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setPhone((String) bindingValue);
            break;
        case 8:
            bindingValue = child.getObjectValue(DateTimeType.class);
            mValueObject.setDateTime((DateTimeType) bindingValue);
            break;
        case 9:
            bindingValue = child.getObjectValue(AddressType.class);
            mValueObject.setAddress((AddressType) bindingValue);
            break;
        case 10:
            bindingValue = child.getObjectValue(LocationType.class);
            mValueObject.setLocation((LocationType) bindingValue);
            break;
        case 11:
            bindingValue = child.getObjectValue(ArrayOfSearchTagSearchTagsArrayType.class);
            mValueObject.setSearchTagsArray((ArrayOfSearchTagSearchTagsArrayType) bindingValue);
            break;
        case 12:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setSummary((String) bindingValue);
            break;
        case 13:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setResultType((String) bindingValue);
            break;
        case 14:
            bindingValue = child.getObjectValue(ImageType.class);
            mValueObject.setImage((ImageType) bindingValue);
            break;
        case 15:
            bindingValue = child.getObjectValue(VideoType.class);
            mValueObject.setVideo((VideoType) bindingValue);
            break;
         default:
            break;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
    }

    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(ResultType.class)) {
            return mValueObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mValueObject = null;
            return;
        }
        if (bindingValue.getClass().equals(ResultType.class)) {
            mValueObject = (ResultType) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public ObjectFactory getObjectFactory() {
        return mValueObjectFactory;
    }

    /**
     * @param valueObjectFactory the java object factory for objects creation 
     */
    public void setObjectFactory(final Object valueObjectFactory) {
        mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

    /** {@inheritDoc} */
    public boolean isSet() {
        return (mValueObject != null);
    }

    /**
     * @return the bound Value object
     */
    public ResultType getResultType() {
        return mValueObject;
    }
    
    /**
     * The COBOL complex element maximum length in bytes.
     * 
     * @return COBOL complex element maximum length in bytes
     */
    public int getByteLength() {
        return BYTE_LENGTH;
    }
}

