


package com.legstar.test.coxb.alltypes.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolOctetStreamBinding;
import com.legstar.coxb.ICobolBinaryBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import java.math.BigInteger;
import java.math.BigDecimal;
import com.legstar.coxb.ICobolFloatBinding;
import com.legstar.coxb.ICobolDoubleBinding;
import com.legstar.coxb.ICobolArrayStringBinding;
import java.util.List;
import com.legstar.coxb.ICobolArrayBinaryBinding;
import com.legstar.coxb.ICobolArrayPackedDecimalBinding;
import com.legstar.coxb.ICobolArrayFloatBinding;
import com.legstar.coxb.ICobolArrayDoubleBinding;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.alltypes.Dfhcommarea;
import com.legstar.test.coxb.alltypes.ObjectFactory;

/**
 * LegStar Binding for Complex element :
 *   Dfhcommarea.
 * 
 * This class was generated by LegStar Binding generator.
 */
public class DfhcommareaBinding 
             extends CComplexBinding {

    /** Value object to which this cobol complex element is bound. */
    private Dfhcommarea mValueObject;
  
    /** Indicates that the associated Value object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedValueObject = false;
    
    /** Maximum host bytes size for this complex object. */
    private static final int BYTE_LENGTH = 267;
    
    /** Child bound to value object property SString(String). */
    public ICobolStringBinding _sString;
    /** Child bound to value object property SBinary(byte[]). */
    public ICobolOctetStreamBinding _sBinary;
    /** Child bound to value object property SShort(Short). */
    public ICobolBinaryBinding _sShort;
    /** Child bound to value object property SUshort(Integer). */
    public ICobolBinaryBinding _sUshort;
    /** Child bound to value object property SInt(Integer). */
    public ICobolBinaryBinding _sInt;
    /** Child bound to value object property SUint(Long). */
    public ICobolBinaryBinding _sUint;
    /** Child bound to value object property SLong(Long). */
    public ICobolPackedDecimalBinding _sLong;
    /** Child bound to value object property SUlong(Long). */
    public ICobolPackedDecimalBinding _sUlong;
    /** Child bound to value object property SXlong(BigInteger). */
    public ICobolPackedDecimalBinding _sXlong;
    /** Child bound to value object property SUxlong(BigInteger). */
    public ICobolPackedDecimalBinding _sUxlong;
    /** Child bound to value object property SDec(BigDecimal). */
    public ICobolPackedDecimalBinding _sDec;
    /** Child bound to value object property SFloat(Float). */
    public ICobolFloatBinding _sFloat;
    /** Child bound to value object property SDouble(Double). */
    public ICobolDoubleBinding _sDouble;
    /** Child bound to value object property AString(String). */
    public ICobolArrayStringBinding _aString;
    /** Child bound to value object property ABinary(String). */
    public ICobolArrayStringBinding _aBinary;
    /** Child bound to value object property AShort(Short). */
    public ICobolArrayBinaryBinding _aShort;
    /** Child bound to value object property AUshort(Integer). */
    public ICobolArrayBinaryBinding _aUshort;
    /** Child bound to value object property AInt(Integer). */
    public ICobolArrayBinaryBinding _aInt;
    /** Child bound to value object property AUint(Long). */
    public ICobolArrayBinaryBinding _aUint;
    /** Child bound to value object property ALong(Long). */
    public ICobolArrayPackedDecimalBinding _aLong;
    /** Child bound to value object property AUlong(Long). */
    public ICobolArrayPackedDecimalBinding _aUlong;
    /** Child bound to value object property AXlong(BigInteger). */
    public ICobolArrayPackedDecimalBinding _aXlong;
    /** Child bound to value object property AUxlong(BigInteger). */
    public ICobolArrayPackedDecimalBinding _aUxlong;
    /** Child bound to value object property ADec(BigDecimal). */
    public ICobolArrayPackedDecimalBinding _aDec;
    /** Child bound to value object property AFloat(Float). */
    public ICobolArrayFloatBinding _aFloat;
    /** Child bound to value object property ADouble(Double). */
    public ICobolArrayDoubleBinding _aDouble;
            
    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
 
    /** Static reference to Value object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Value object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mValueObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound Value object.
     */
    public DfhcommareaBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound Value object.
     * 
     * @param valueObject the concrete Value object instance bound to this
     *        complex element
     */
    public DfhcommareaBinding(
            final Dfhcommarea valueObject) {
        this("", "", null, valueObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated Value object.
    * 
    * @param bindingName the identifier for this binding
    * @param fieldName field name in parent Value object
    * @param valueObject the concrete Value object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public DfhcommareaBinding(
            final String bindingName,
            final String fieldName,
            final ICobolComplexBinding parentBinding,
            final Dfhcommarea valueObject) {
        
        super(bindingName, fieldName, Dfhcommarea.class, null, parentBinding);
        mValueObject = valueObject;
        if (mValueObject != null) {
            mUnusedValueObject = true;
        }
        initChildren();
        setByteLength(BYTE_LENGTH);
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding children instances */

        _sString = BF.createStringBinding("SString",
               "SString", String.class, this);
        _sString.setCobolName("S-STRING");
        _sString.setByteLength(4);
        _sBinary = BF.createOctetStreamBinding("SBinary",
               "SBinary", byte[].class, this);
        _sBinary.setCobolName("S-BINARY");
        _sBinary.setByteLength(4);
        _sShort = BF.createBinaryBinding("SShort",
               "SShort", Short.class, this);
        _sShort.setCobolName("S-SHORT");
        _sShort.setByteLength(2);
        _sShort.setTotalDigits(4);
        _sShort.setIsSigned(true);
        _sUshort = BF.createBinaryBinding("SUshort",
               "SUshort", Integer.class, this);
        _sUshort.setCobolName("S-USHORT");
        _sUshort.setByteLength(2);
        _sUshort.setTotalDigits(4);
        _sInt = BF.createBinaryBinding("SInt",
               "SInt", Integer.class, this);
        _sInt.setCobolName("S-INT");
        _sInt.setByteLength(4);
        _sInt.setTotalDigits(9);
        _sInt.setIsSigned(true);
        _sUint = BF.createBinaryBinding("SUint",
               "SUint", Long.class, this);
        _sUint.setCobolName("S-UINT");
        _sUint.setByteLength(4);
        _sUint.setTotalDigits(9);
        _sLong = BF.createPackedDecimalBinding("SLong",
               "SLong", Long.class, this);
        _sLong.setCobolName("S-LONG");
        _sLong.setByteLength(10);
        _sLong.setTotalDigits(18);
        _sLong.setIsSigned(true);
        _sUlong = BF.createPackedDecimalBinding("SUlong",
               "SUlong", Long.class, this);
        _sUlong.setCobolName("S-ULONG");
        _sUlong.setByteLength(10);
        _sUlong.setTotalDigits(18);
        _sXlong = BF.createPackedDecimalBinding("SXlong",
               "SXlong", BigInteger.class, this);
        _sXlong.setCobolName("S-XLONG");
        _sXlong.setByteLength(16);
        _sXlong.setTotalDigits(31);
        _sXlong.setIsSigned(true);
        _sUxlong = BF.createPackedDecimalBinding("SUxlong",
               "SUxlong", BigInteger.class, this);
        _sUxlong.setCobolName("S-UXLONG");
        _sUxlong.setByteLength(16);
        _sUxlong.setTotalDigits(31);
        _sDec = BF.createPackedDecimalBinding("SDec",
               "SDec", BigDecimal.class, this);
        _sDec.setCobolName("S-DEC");
        _sDec.setByteLength(5);
        _sDec.setTotalDigits(9);
        _sDec.setFractionDigits(2);
        _sFloat = BF.createFloatBinding("SFloat",
               "SFloat", Float.class, this);
        _sFloat.setCobolName("S-FLOAT");
        _sFloat.setByteLength(4);
        _sDouble = BF.createDoubleBinding("SDouble",
               "SDouble", Double.class, this);
        _sDouble.setCobolName("S-DOUBLE");
        _sDouble.setByteLength(8);
        _aString = BF.createArrayStringBinding("AString",
               "AString", String.class, this);
        _aString.setCobolName("A-STRING");
        _aString.setByteLength(8);
        _aString.setItemByteLength(4);
        _aString.setMinOccurs(2);
        _aString.setMaxOccurs(2);
        _aBinary = BF.createArrayStringBinding("ABinary",
               "ABinary", String.class, this);
        _aBinary.setCobolName("A-BINARY");
        _aBinary.setByteLength(8);
        _aBinary.setItemByteLength(4);
        _aBinary.setMinOccurs(2);
        _aBinary.setMaxOccurs(2);
        _aShort = BF.createArrayBinaryBinding("AShort",
               "AShort", Short.class, this);
        _aShort.setCobolName("A-SHORT");
        _aShort.setByteLength(4);
        _aShort.setItemByteLength(2);
        _aShort.setTotalDigits(4);
        _aShort.setIsSigned(true);
        _aShort.setMinOccurs(2);
        _aShort.setMaxOccurs(2);
        _aUshort = BF.createArrayBinaryBinding("AUshort",
               "AUshort", Integer.class, this);
        _aUshort.setCobolName("A-USHORT");
        _aUshort.setByteLength(4);
        _aUshort.setItemByteLength(2);
        _aUshort.setTotalDigits(4);
        _aUshort.setMinOccurs(2);
        _aUshort.setMaxOccurs(2);
        _aInt = BF.createArrayBinaryBinding("AInt",
               "AInt", Integer.class, this);
        _aInt.setCobolName("A-INT");
        _aInt.setByteLength(8);
        _aInt.setItemByteLength(4);
        _aInt.setTotalDigits(9);
        _aInt.setIsSigned(true);
        _aInt.setMinOccurs(2);
        _aInt.setMaxOccurs(2);
        _aUint = BF.createArrayBinaryBinding("AUint",
               "AUint", Long.class, this);
        _aUint.setCobolName("A-UINT");
        _aUint.setByteLength(8);
        _aUint.setItemByteLength(4);
        _aUint.setTotalDigits(9);
        _aUint.setMinOccurs(2);
        _aUint.setMaxOccurs(2);
        _aLong = BF.createArrayPackedDecimalBinding("ALong",
               "ALong", Long.class, this);
        _aLong.setCobolName("A-LONG");
        _aLong.setByteLength(20);
        _aLong.setItemByteLength(10);
        _aLong.setTotalDigits(18);
        _aLong.setIsSigned(true);
        _aLong.setMinOccurs(2);
        _aLong.setMaxOccurs(2);
        _aUlong = BF.createArrayPackedDecimalBinding("AUlong",
               "AUlong", Long.class, this);
        _aUlong.setCobolName("A-ULONG");
        _aUlong.setByteLength(20);
        _aUlong.setItemByteLength(10);
        _aUlong.setTotalDigits(18);
        _aUlong.setMinOccurs(2);
        _aUlong.setMaxOccurs(2);
        _aXlong = BF.createArrayPackedDecimalBinding("AXlong",
               "AXlong", BigInteger.class, this);
        _aXlong.setCobolName("A-XLONG");
        _aXlong.setByteLength(32);
        _aXlong.setItemByteLength(16);
        _aXlong.setTotalDigits(31);
        _aXlong.setIsSigned(true);
        _aXlong.setMinOccurs(2);
        _aXlong.setMaxOccurs(2);
        _aUxlong = BF.createArrayPackedDecimalBinding("AUxlong",
               "AUxlong", BigInteger.class, this);
        _aUxlong.setCobolName("A-UXLONG");
        _aUxlong.setByteLength(32);
        _aUxlong.setItemByteLength(16);
        _aUxlong.setTotalDigits(31);
        _aUxlong.setMinOccurs(2);
        _aUxlong.setMaxOccurs(2);
        _aDec = BF.createArrayPackedDecimalBinding("ADec",
               "ADec", BigDecimal.class, this);
        _aDec.setCobolName("A-DEC");
        _aDec.setByteLength(10);
        _aDec.setItemByteLength(5);
        _aDec.setTotalDigits(9);
        _aDec.setFractionDigits(2);
        _aDec.setMinOccurs(2);
        _aDec.setMaxOccurs(2);
        _aFloat = BF.createArrayFloatBinding("AFloat",
               "AFloat", Float.class, this);
        _aFloat.setCobolName("A-FLOAT");
        _aFloat.setByteLength(8);
        _aFloat.setItemByteLength(4);
        _aFloat.setMinOccurs(2);
        _aFloat.setMaxOccurs(2);
        _aDouble = BF.createArrayDoubleBinding("ADouble",
               "ADouble", Double.class, this);
        _aDouble.setCobolName("A-DOUBLE");
        _aDouble.setByteLength(16);
        _aDouble.setItemByteLength(8);
        _aDouble.setMinOccurs(2);
        _aDouble.setMaxOccurs(2);

        /* Add children to children list */
        getChildrenList().add(_sString);
        getChildrenList().add(_sBinary);
        getChildrenList().add(_sShort);
        getChildrenList().add(_sUshort);
        getChildrenList().add(_sInt);
        getChildrenList().add(_sUint);
        getChildrenList().add(_sLong);
        getChildrenList().add(_sUlong);
        getChildrenList().add(_sXlong);
        getChildrenList().add(_sUxlong);
        getChildrenList().add(_sDec);
        getChildrenList().add(_sFloat);
        getChildrenList().add(_sDouble);
        getChildrenList().add(_aString);
        getChildrenList().add(_aBinary);
        getChildrenList().add(_aShort);
        getChildrenList().add(_aUshort);
        getChildrenList().add(_aInt);
        getChildrenList().add(_aUint);
        getChildrenList().add(_aLong);
        getChildrenList().add(_aUlong);
        getChildrenList().add(_aXlong);
        getChildrenList().add(_aUxlong);
        getChildrenList().add(_aDec);
        getChildrenList().add(_aFloat);
        getChildrenList().add(_aDouble);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public void createValueObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
        if (mUnusedValueObject && mValueObject != null) {
            mUnusedValueObject = false;
            return;
        }
        mValueObject = mValueObjectFactory.createDfhcommarea();
    }

    /** {@inheritDoc} */
    public void setChildrenValues() throws HostException {

         /* Make sure there is an associated Value object*/
        if (mValueObject == null) {
            createValueObject();
        }
        /* Get Value object property _sString */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sString"
                    + " value=" + mValueObject.getSString());
        }
        _sString.setObjectValue(mValueObject.getSString());
        /* Get Value object property _sBinary */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sBinary"
                    + " value=" + mValueObject.getSBinary());
        }
        _sBinary.setObjectValue(mValueObject.getSBinary());
        /* Get Value object property _sShort */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sShort"
                    + " value=" + mValueObject.getSShort());
        }
        _sShort.setObjectValue(mValueObject.getSShort());
        /* Get Value object property _sUshort */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sUshort"
                    + " value=" + mValueObject.getSUshort());
        }
        _sUshort.setObjectValue(mValueObject.getSUshort());
        /* Get Value object property _sInt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sInt"
                    + " value=" + mValueObject.getSInt());
        }
        _sInt.setObjectValue(mValueObject.getSInt());
        /* Get Value object property _sUint */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sUint"
                    + " value=" + mValueObject.getSUint());
        }
        _sUint.setObjectValue(mValueObject.getSUint());
        /* Get Value object property _sLong */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sLong"
                    + " value=" + mValueObject.getSLong());
        }
        _sLong.setObjectValue(mValueObject.getSLong());
        /* Get Value object property _sUlong */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sUlong"
                    + " value=" + mValueObject.getSUlong());
        }
        _sUlong.setObjectValue(mValueObject.getSUlong());
        /* Get Value object property _sXlong */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sXlong"
                    + " value=" + mValueObject.getSXlong());
        }
        _sXlong.setObjectValue(mValueObject.getSXlong());
        /* Get Value object property _sUxlong */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sUxlong"
                    + " value=" + mValueObject.getSUxlong());
        }
        _sUxlong.setObjectValue(mValueObject.getSUxlong());
        /* Get Value object property _sDec */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sDec"
                    + " value=" + mValueObject.getSDec());
        }
        _sDec.setObjectValue(mValueObject.getSDec());
        /* Get Value object property _sFloat */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sFloat"
                    + " value=" + mValueObject.getSFloat());
        }
        _sFloat.setObjectValue(mValueObject.getSFloat());
        /* Get Value object property _sDouble */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_sDouble"
                    + " value=" + mValueObject.getSDouble());
        }
        _sDouble.setObjectValue(mValueObject.getSDouble());
        /* Get Value object property _aString */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aString"
                    + " value=" + mValueObject.getAString());
        }
        _aString.setObjectValue(mValueObject.getAString());
        /* Get Value object property _aBinary */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aBinary"
                    + " value=" + mValueObject.getABinary());
        }
        _aBinary.setObjectValue(mValueObject.getABinary());
        /* Get Value object property _aShort */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aShort"
                    + " value=" + mValueObject.getAShort());
        }
        _aShort.setObjectValue(mValueObject.getAShort());
        /* Get Value object property _aUshort */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aUshort"
                    + " value=" + mValueObject.getAUshort());
        }
        _aUshort.setObjectValue(mValueObject.getAUshort());
        /* Get Value object property _aInt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aInt"
                    + " value=" + mValueObject.getAInt());
        }
        _aInt.setObjectValue(mValueObject.getAInt());
        /* Get Value object property _aUint */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aUint"
                    + " value=" + mValueObject.getAUint());
        }
        _aUint.setObjectValue(mValueObject.getAUint());
        /* Get Value object property _aLong */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aLong"
                    + " value=" + mValueObject.getALong());
        }
        _aLong.setObjectValue(mValueObject.getALong());
        /* Get Value object property _aUlong */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aUlong"
                    + " value=" + mValueObject.getAUlong());
        }
        _aUlong.setObjectValue(mValueObject.getAUlong());
        /* Get Value object property _aXlong */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aXlong"
                    + " value=" + mValueObject.getAXlong());
        }
        _aXlong.setObjectValue(mValueObject.getAXlong());
        /* Get Value object property _aUxlong */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aUxlong"
                    + " value=" + mValueObject.getAUxlong());
        }
        _aUxlong.setObjectValue(mValueObject.getAUxlong());
        /* Get Value object property _aDec */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aDec"
                    + " value=" + mValueObject.getADec());
        }
        _aDec.setObjectValue(mValueObject.getADec());
        /* Get Value object property _aFloat */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aFloat"
                    + " value=" + mValueObject.getAFloat());
        }
        _aFloat.setObjectValue(mValueObject.getAFloat());
        /* Get Value object property _aDouble */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_aDouble"
                    + " value=" + mValueObject.getADouble());
        }
        _aDouble.setObjectValue(mValueObject.getADouble());
     }

    /** {@inheritDoc} */
    public void setPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        /* Set the Value object property value from binding object */
        Object bindingValue = null;
        switch (index) {
        case 0:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setSString((String) bindingValue);
            break;
        case 1:
            bindingValue = child.getObjectValue(byte[].class);
            mValueObject.setSBinary((byte[]) bindingValue);
            break;
        case 2:
            bindingValue = child.getObjectValue(Short.class);
            mValueObject.setSShort((Short) bindingValue);
            break;
        case 3:
            bindingValue = child.getObjectValue(Integer.class);
            mValueObject.setSUshort((Integer) bindingValue);
            break;
        case 4:
            bindingValue = child.getObjectValue(Integer.class);
            mValueObject.setSInt((Integer) bindingValue);
            break;
        case 5:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setSUint((Long) bindingValue);
            break;
        case 6:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setSLong((Long) bindingValue);
            break;
        case 7:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setSUlong((Long) bindingValue);
            break;
        case 8:
            bindingValue = child.getObjectValue(BigInteger.class);
            mValueObject.setSXlong((BigInteger) bindingValue);
            break;
        case 9:
            bindingValue = child.getObjectValue(BigInteger.class);
            mValueObject.setSUxlong((BigInteger) bindingValue);
            break;
        case 10:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setSDec((BigDecimal) bindingValue);
            break;
        case 11:
            bindingValue = child.getObjectValue(Float.class);
            mValueObject.setSFloat((Float) bindingValue);
            break;
        case 12:
            bindingValue = child.getObjectValue(Double.class);
            mValueObject.setSDouble((Double) bindingValue);
            break;
        case 13:
            bindingValue = child.getObjectValue(String.class);
            List < String > listAString = cast(bindingValue);
            mValueObject.getAString().clear();
            mValueObject.getAString().addAll(listAString);
            break;
        case 14:
            bindingValue = child.getObjectValue(String.class);
            List < String > listABinary = cast(bindingValue);
            mValueObject.getABinary().clear();
            mValueObject.getABinary().addAll(listABinary);
            break;
        case 15:
            bindingValue = child.getObjectValue(Short.class);
            List < Short > listAShort = cast(bindingValue);
            mValueObject.getAShort().clear();
            mValueObject.getAShort().addAll(listAShort);
            break;
        case 16:
            bindingValue = child.getObjectValue(Integer.class);
            List < Integer > listAUshort = cast(bindingValue);
            mValueObject.getAUshort().clear();
            mValueObject.getAUshort().addAll(listAUshort);
            break;
        case 17:
            bindingValue = child.getObjectValue(Integer.class);
            List < Integer > listAInt = cast(bindingValue);
            mValueObject.getAInt().clear();
            mValueObject.getAInt().addAll(listAInt);
            break;
        case 18:
            bindingValue = child.getObjectValue(Long.class);
            List < Long > listAUint = cast(bindingValue);
            mValueObject.getAUint().clear();
            mValueObject.getAUint().addAll(listAUint);
            break;
        case 19:
            bindingValue = child.getObjectValue(Long.class);
            List < Long > listALong = cast(bindingValue);
            mValueObject.getALong().clear();
            mValueObject.getALong().addAll(listALong);
            break;
        case 20:
            bindingValue = child.getObjectValue(Long.class);
            List < Long > listAUlong = cast(bindingValue);
            mValueObject.getAUlong().clear();
            mValueObject.getAUlong().addAll(listAUlong);
            break;
        case 21:
            bindingValue = child.getObjectValue(BigInteger.class);
            List < BigInteger > listAXlong = cast(bindingValue);
            mValueObject.getAXlong().clear();
            mValueObject.getAXlong().addAll(listAXlong);
            break;
        case 22:
            bindingValue = child.getObjectValue(BigInteger.class);
            List < BigInteger > listAUxlong = cast(bindingValue);
            mValueObject.getAUxlong().clear();
            mValueObject.getAUxlong().addAll(listAUxlong);
            break;
        case 23:
            bindingValue = child.getObjectValue(BigDecimal.class);
            List < BigDecimal > listADec = cast(bindingValue);
            mValueObject.getADec().clear();
            mValueObject.getADec().addAll(listADec);
            break;
        case 24:
            bindingValue = child.getObjectValue(Float.class);
            List < Float > listAFloat = cast(bindingValue);
            mValueObject.getAFloat().clear();
            mValueObject.getAFloat().addAll(listAFloat);
            break;
        case 25:
            bindingValue = child.getObjectValue(Double.class);
            List < Double > listADouble = cast(bindingValue);
            mValueObject.getADouble().clear();
            mValueObject.getADouble().addAll(listADouble);
            break;
         default:
            break;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
    }

    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(Dfhcommarea.class)) {
            return mValueObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mValueObject = null;
            return;
        }
        if (bindingValue.getClass().equals(Dfhcommarea.class)) {
            mValueObject = (Dfhcommarea) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public ObjectFactory getObjectFactory() {
        return mValueObjectFactory;
    }

    /**
     * @param valueObjectFactory the java object factory for objects creation 
     */
    public void setObjectFactory(final Object valueObjectFactory) {
        mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

    /** {@inheritDoc} */
    public boolean isSet() {
        return (mValueObject != null);
    }

    /**
     * @return the bound Value object
     */
    public Dfhcommarea getDfhcommarea() {
        return mValueObject;
    }
    
    /**
     * The COBOL complex element maximum length in bytes.
     * 
     * @return COBOL complex element maximum length in bytes
     */
    public int getByteLength() {
        return BYTE_LENGTH;
    }
}

