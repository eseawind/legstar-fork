


package com.legstar.test.coxb.binnatsi.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.test.coxb.binnatsi.LsHalfwords;
import com.legstar.test.coxb.binnatsi.LsFullwords;
import com.legstar.test.coxb.binnatsi.LsDoublewords;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.binnatsi.LsUnsignedNative;
import com.legstar.test.coxb.binnatsi.ObjectFactory;

/**
 * LegStar Binding for Complex element :
 *   LsUnsignedNative.
 * 
 * This class was generated by LegStar Binding generator.
 */
public class LsUnsignedNativeBinding 
             extends CComplexBinding {

    /** Value object to which this cobol complex element is bound. */
    private LsUnsignedNative mValueObject;
  
    /** Indicates that the associated Value object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedValueObject = false;
    
    /** Maximum host bytes size for this complex object. */
    private static final int BYTE_LENGTH = 56;
    
    /** Child bound to value object property LsHalfwords(LsHalfwords). */
    public ICobolComplexBinding _lsHalfwords;
    /** Child bound to value object property LsFullwords(LsFullwords). */
    public ICobolComplexBinding _lsFullwords;
    /** Child bound to value object property LsDoublewords(LsDoublewords). */
    public ICobolComplexBinding _lsDoublewords;
            
    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());
 
    /** Static reference to Value object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Value object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mValueObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound Value object.
     */
    public LsUnsignedNativeBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound Value object.
     * 
     * @param valueObject the concrete Value object instance bound to this
     *        complex element
     */
    public LsUnsignedNativeBinding(
            final LsUnsignedNative valueObject) {
        this("", "", null, valueObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated Value object.
    * 
    * @param bindingName the identifier for this binding
    * @param fieldName field name in parent Value object
    * @param valueObject the concrete Value object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public LsUnsignedNativeBinding(
            final String bindingName,
            final String fieldName,
            final ICobolComplexBinding parentBinding,
            final LsUnsignedNative valueObject) {
        
        super(bindingName, fieldName, LsUnsignedNative.class, null, parentBinding);
        mValueObject = valueObject;
        if (mValueObject != null) {
            mUnusedValueObject = true;
        }
        initChildren();
        setByteLength(BYTE_LENGTH);
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding children instances */

        _lsHalfwords = new LsHalfwordsBinding("LsHalfwords",
               "LsHalfwords", this, null);
        _lsHalfwords.setCobolName("LS-HALFWORDS");
        _lsHalfwords.setByteLength(8);
        _lsFullwords = new LsFullwordsBinding("LsFullwords",
               "LsFullwords", this, null);
        _lsFullwords.setCobolName("LS-FULLWORDS");
        _lsFullwords.setByteLength(16);
        _lsDoublewords = new LsDoublewordsBinding("LsDoublewords",
               "LsDoublewords", this, null);
        _lsDoublewords.setCobolName("LS-DOUBLEWORDS");
        _lsDoublewords.setByteLength(32);

        /* Add children to children list */
        getChildrenList().add(_lsHalfwords);
        getChildrenList().add(_lsFullwords);
        getChildrenList().add(_lsDoublewords);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public void createValueObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
        if (mUnusedValueObject && mValueObject != null) {
            mUnusedValueObject = false;
            return;
        }
        mValueObject = mValueObjectFactory.createLsUnsignedNative();
    }

    /** {@inheritDoc} */
    public void setChildrenValues() throws HostException {

         /* Make sure there is an associated Value object*/
        if (mValueObject == null) {
            createValueObject();
        }
        /* Get Value object property _lsHalfwords */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_lsHalfwords"
                    + " value=" + mValueObject.getLsHalfwords());
        }
        _lsHalfwords.setObjectValue(mValueObject.getLsHalfwords());
        /* Get Value object property _lsFullwords */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_lsFullwords"
                    + " value=" + mValueObject.getLsFullwords());
        }
        _lsFullwords.setObjectValue(mValueObject.getLsFullwords());
        /* Get Value object property _lsDoublewords */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_lsDoublewords"
                    + " value=" + mValueObject.getLsDoublewords());
        }
        _lsDoublewords.setObjectValue(mValueObject.getLsDoublewords());
     }

    /** {@inheritDoc} */
    public void setPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        /* Set the Value object property value from binding object */
        Object bindingValue = null;
        switch (index) {
        case 0:
            bindingValue = child.getObjectValue(LsHalfwords.class);
            mValueObject.setLsHalfwords((LsHalfwords) bindingValue);
            break;
        case 1:
            bindingValue = child.getObjectValue(LsFullwords.class);
            mValueObject.setLsFullwords((LsFullwords) bindingValue);
            break;
        case 2:
            bindingValue = child.getObjectValue(LsDoublewords.class);
            mValueObject.setLsDoublewords((LsDoublewords) bindingValue);
            break;
         default:
            break;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
    }

    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(LsUnsignedNative.class)) {
            return mValueObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mValueObject = null;
            return;
        }
        if (bindingValue.getClass().equals(LsUnsignedNative.class)) {
            mValueObject = (LsUnsignedNative) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public ObjectFactory getObjectFactory() {
        return mValueObjectFactory;
    }

    /**
     * @param valueObjectFactory the java object factory for objects creation 
     */
    public void setObjectFactory(final Object valueObjectFactory) {
        mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

    /** {@inheritDoc} */
    public boolean isSet() {
        return (mValueObject != null);
    }

    /**
     * @return the bound Value object
     */
    public LsUnsignedNative getLsUnsignedNative() {
        return mValueObject;
    }
    
    /**
     * The COBOL complex element maximum length in bytes.
     * 
     * @return COBOL complex element maximum length in bytes
     */
    public int getByteLength() {
        return BYTE_LENGTH;
    }
}

