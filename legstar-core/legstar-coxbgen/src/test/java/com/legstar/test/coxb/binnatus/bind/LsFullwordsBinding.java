


package com.legstar.test.coxb.binnatus.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolBinaryBinding;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.binnatus.LsFullwords;
import com.legstar.test.coxb.binnatus.ObjectFactory;

/**
 * LegStar Binding for Complex element :
 *   LsFullwords.
 * 
 * This class was generated by LegStar Binding generator.
 */
public class LsFullwordsBinding 
             extends CComplexBinding {

    /** Value object to which this cobol complex element is bound. */
    private LsFullwords mValueObject;
  
    /** Indicates that the associated Value object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedValueObject = false;
    
    /** Maximum host bytes size for this complex object. */
    private static final int BYTE_LENGTH = 16;
    
    /** Child bound to value object property LsP9X9Min(Long). */
    public ICobolBinaryBinding _lsP9X9Min;
    /** Child bound to value object property LsP9X9Low(Long). */
    public ICobolBinaryBinding _lsP9X9Low;
    /** Child bound to value object property LsP9X9High(Long). */
    public ICobolBinaryBinding _lsP9X9High;
    /** Child bound to value object property LsP9X9Max(Long). */
    public ICobolBinaryBinding _lsP9X9Max;
            
    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
 
    /** Static reference to Value object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Value object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mValueObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound Value object.
     */
    public LsFullwordsBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound Value object.
     * 
     * @param valueObject the concrete Value object instance bound to this
     *        complex element
     */
    public LsFullwordsBinding(
            final LsFullwords valueObject) {
        this("", "", null, valueObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated Value object.
    * 
    * @param bindingName the identifier for this binding
    * @param fieldName field name in parent Value object
    * @param valueObject the concrete Value object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public LsFullwordsBinding(
            final String bindingName,
            final String fieldName,
            final ICobolComplexBinding parentBinding,
            final LsFullwords valueObject) {
        
        super(bindingName, fieldName, LsFullwords.class, null, parentBinding);
        mValueObject = valueObject;
        if (mValueObject != null) {
            mUnusedValueObject = true;
        }
        initChildren();
        setByteLength(BYTE_LENGTH);
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding children instances */

        _lsP9X9Min = BF.createBinaryBinding("LsP9X9Min",
               "LsP9X9Min", Long.class, this);
        _lsP9X9Min.setCobolName("LS-P9X9-MIN");
        _lsP9X9Min.setByteLength(4);
        _lsP9X9Min.setTotalDigits(9);
        _lsP9X9Low = BF.createBinaryBinding("LsP9X9Low",
               "LsP9X9Low", Long.class, this);
        _lsP9X9Low.setCobolName("LS-P9X9-LOW");
        _lsP9X9Low.setByteLength(4);
        _lsP9X9Low.setTotalDigits(9);
        _lsP9X9High = BF.createBinaryBinding("LsP9X9High",
               "LsP9X9High", Long.class, this);
        _lsP9X9High.setCobolName("LS-P9X9-HIGH");
        _lsP9X9High.setByteLength(4);
        _lsP9X9High.setTotalDigits(9);
        _lsP9X9Max = BF.createBinaryBinding("LsP9X9Max",
               "LsP9X9Max", Long.class, this);
        _lsP9X9Max.setCobolName("LS-P9X9-MAX");
        _lsP9X9Max.setByteLength(4);
        _lsP9X9Max.setTotalDigits(9);

        /* Add children to children list */
        getChildrenList().add(_lsP9X9Min);
        getChildrenList().add(_lsP9X9Low);
        getChildrenList().add(_lsP9X9High);
        getChildrenList().add(_lsP9X9Max);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public void createValueObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
        if (mUnusedValueObject && mValueObject != null) {
            mUnusedValueObject = false;
            return;
        }
        mValueObject = mValueObjectFactory.createLsFullwords();
    }

    /** {@inheritDoc} */
    public void setChildrenValues() throws HostException {

         /* Make sure there is an associated Value object*/
        if (mValueObject == null) {
            createValueObject();
        }
        /* Get Value object property _lsP9X9Min */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_lsP9X9Min"
                    + " value=" + mValueObject.getLsP9X9Min());
        }
        _lsP9X9Min.setObjectValue(mValueObject.getLsP9X9Min());
        /* Get Value object property _lsP9X9Low */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_lsP9X9Low"
                    + " value=" + mValueObject.getLsP9X9Low());
        }
        _lsP9X9Low.setObjectValue(mValueObject.getLsP9X9Low());
        /* Get Value object property _lsP9X9High */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_lsP9X9High"
                    + " value=" + mValueObject.getLsP9X9High());
        }
        _lsP9X9High.setObjectValue(mValueObject.getLsP9X9High());
        /* Get Value object property _lsP9X9Max */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_lsP9X9Max"
                    + " value=" + mValueObject.getLsP9X9Max());
        }
        _lsP9X9Max.setObjectValue(mValueObject.getLsP9X9Max());
     }

    /** {@inheritDoc} */
    public void setPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        /* Set the Value object property value from binding object */
        Object bindingValue = null;
        switch (index) {
        case 0:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setLsP9X9Min((Long) bindingValue);
            break;
        case 1:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setLsP9X9Low((Long) bindingValue);
            break;
        case 2:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setLsP9X9High((Long) bindingValue);
            break;
        case 3:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setLsP9X9Max((Long) bindingValue);
            break;
         default:
            break;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
    }

    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(LsFullwords.class)) {
            return mValueObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mValueObject = null;
            return;
        }
        if (bindingValue.getClass().equals(LsFullwords.class)) {
            mValueObject = (LsFullwords) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public ObjectFactory getObjectFactory() {
        return mValueObjectFactory;
    }

    /**
     * @param valueObjectFactory the java object factory for objects creation 
     */
    public void setObjectFactory(final Object valueObjectFactory) {
        mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

    /** {@inheritDoc} */
    public boolean isSet() {
        return (mValueObject != null);
    }

    /**
     * @return the bound Value object
     */
    public LsFullwords getLsFullwords() {
        return mValueObject;
    }
    
    /**
     * The COBOL complex element maximum length in bytes.
     * 
     * @return COBOL complex element maximum length in bytes
     */
    public int getByteLength() {
        return BYTE_LENGTH;
    }
}

