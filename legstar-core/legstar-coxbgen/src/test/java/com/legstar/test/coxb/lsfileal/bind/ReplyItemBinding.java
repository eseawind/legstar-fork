


package com.legstar.test.coxb.lsfileal.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolZonedDecimalBinding;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.test.coxb.lsfileal.ReplyPersonal;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.lsfileal.ReplyItem;
import com.legstar.test.coxb.lsfileal.ObjectFactory;

/**
 * LegStar Binding for Complex element :
 *   ReplyItem.
 * 
 * This class was generated by LegStar Binding generator.
 */
public class ReplyItemBinding 
             extends CComplexBinding {

    /** Value object to which this cobol complex element is bound. */
    private ReplyItem mValueObject;
  
    /** Indicates that the associated Value object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedValueObject = false;
    
    /** Maximum host bytes size for this complex object. */
    private static final int BYTE_LENGTH = 79;
    
    /** Child bound to value object property ReplyNumber(Long). */
    public ICobolZonedDecimalBinding _replyNumber;
    /** Child bound to value object property ReplyPersonal(ReplyPersonal). */
    public ICobolComplexBinding _replyPersonal;
    /** Child bound to value object property ReplyDate(String). */
    public ICobolStringBinding _replyDate;
    /** Child bound to value object property ReplyAmount(String). */
    public ICobolStringBinding _replyAmount;
    /** Child bound to value object property ReplyComment(String). */
    public ICobolStringBinding _replyComment;
            
    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
 
    /** Static reference to Value object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Value object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mValueObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound Value object.
     */
    public ReplyItemBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound Value object.
     * 
     * @param valueObject the concrete Value object instance bound to this
     *        complex element
     */
    public ReplyItemBinding(
            final ReplyItem valueObject) {
        this("", "", null, valueObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated Value object.
    * 
    * @param bindingName the identifier for this binding
    * @param fieldName field name in parent Value object
    * @param valueObject the concrete Value object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public ReplyItemBinding(
            final String bindingName,
            final String fieldName,
            final ICobolComplexBinding parentBinding,
            final ReplyItem valueObject) {
        
        super(bindingName, fieldName, ReplyItem.class, null, parentBinding);
        mValueObject = valueObject;
        if (mValueObject != null) {
            mUnusedValueObject = true;
        }
        initChildren();
        setByteLength(BYTE_LENGTH);
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding children instances */

        _replyNumber = BF.createZonedDecimalBinding("ReplyNumber",
               "ReplyNumber", Long.class, this);
        _replyNumber.setCobolName("REPLY-NUMBER");
        _replyNumber.setByteLength(6);
        _replyNumber.setTotalDigits(6);
        _replyPersonal = new ReplyPersonalBinding("ReplyPersonal",
               "ReplyPersonal", this, null);
        _replyPersonal.setCobolName("REPLY-PERSONAL");
        _replyPersonal.setByteLength(48);
        _replyDate = BF.createStringBinding("ReplyDate",
               "ReplyDate", String.class, this);
        _replyDate.setCobolName("REPLY-DATE");
        _replyDate.setByteLength(8);
        _replyAmount = BF.createStringBinding("ReplyAmount",
               "ReplyAmount", String.class, this);
        _replyAmount.setCobolName("REPLY-AMOUNT");
        _replyAmount.setByteLength(8);
        _replyComment = BF.createStringBinding("ReplyComment",
               "ReplyComment", String.class, this);
        _replyComment.setCobolName("REPLY-COMMENT");
        _replyComment.setByteLength(9);

        /* Add children to children list */
        getChildrenList().add(_replyNumber);
        getChildrenList().add(_replyPersonal);
        getChildrenList().add(_replyDate);
        getChildrenList().add(_replyAmount);
        getChildrenList().add(_replyComment);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public void createValueObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
        if (mUnusedValueObject && mValueObject != null) {
            mUnusedValueObject = false;
            return;
        }
        mValueObject = mValueObjectFactory.createReplyItem();
    }

    /** {@inheritDoc} */
    public void setChildrenValues() throws HostException {

         /* Make sure there is an associated Value object*/
        if (mValueObject == null) {
            createValueObject();
        }
        /* Get Value object property _replyNumber */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_replyNumber"
                    + " value=" + mValueObject.getReplyNumber());
        }
        _replyNumber.setObjectValue(mValueObject.getReplyNumber());
        /* Get Value object property _replyPersonal */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_replyPersonal"
                    + " value=" + mValueObject.getReplyPersonal());
        }
        _replyPersonal.setObjectValue(mValueObject.getReplyPersonal());
        /* Get Value object property _replyDate */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_replyDate"
                    + " value=" + mValueObject.getReplyDate());
        }
        _replyDate.setObjectValue(mValueObject.getReplyDate());
        /* Get Value object property _replyAmount */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_replyAmount"
                    + " value=" + mValueObject.getReplyAmount());
        }
        _replyAmount.setObjectValue(mValueObject.getReplyAmount());
        /* Get Value object property _replyComment */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_replyComment"
                    + " value=" + mValueObject.getReplyComment());
        }
        _replyComment.setObjectValue(mValueObject.getReplyComment());
     }

    /** {@inheritDoc} */
    public void setPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        /* Set the Value object property value from binding object */
        Object bindingValue = null;
        switch (index) {
        case 0:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setReplyNumber((Long) bindingValue);
            break;
        case 1:
            bindingValue = child.getObjectValue(ReplyPersonal.class);
            mValueObject.setReplyPersonal((ReplyPersonal) bindingValue);
            break;
        case 2:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setReplyDate((String) bindingValue);
            break;
        case 3:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setReplyAmount((String) bindingValue);
            break;
        case 4:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setReplyComment((String) bindingValue);
            break;
         default:
            break;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
    }

    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(ReplyItem.class)) {
            return mValueObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mValueObject = null;
            return;
        }
        if (bindingValue.getClass().equals(ReplyItem.class)) {
            mValueObject = (ReplyItem) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public ObjectFactory getObjectFactory() {
        return mValueObjectFactory;
    }

    /**
     * @param valueObjectFactory the java object factory for objects creation 
     */
    public void setObjectFactory(final Object valueObjectFactory) {
        mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

    /** {@inheritDoc} */
    public boolean isSet() {
        return (mValueObject != null);
    }

    /**
     * @return the bound Value object
     */
    public ReplyItem getReplyItem() {
        return mValueObject;
    }
    
    /**
     * The COBOL complex element maximum length in bytes.
     * 
     * @return COBOL complex element maximum length in bytes
     */
    public int getByteLength() {
        return BYTE_LENGTH;
    }
}

