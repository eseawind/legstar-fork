

package com.legstar.test.coxb.redinout.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CChoiceBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.test.coxb.redinout.CParain;
import com.legstar.test.coxb.redinout.CParaout;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.redinout.Dfhcommarea;

/**
 * LegStar Binding for Choice element:
 *   CBuffer
 *   CParain
 *   CParaout
 * 
 * Represents a choice between 2 or more elements. A choice maps to a cobol
 * REDEFINES clause exposed as an xs:choice in the corresponding XML schema
 * 
 * This class was generated by LegStar Binding generator.
 */
public class CBufferChoiceBinding 
             extends CChoiceBinding {

    /** Alternative binding bound to value object property CBuffer(String). */
    public ICobolStringBinding _cBuffer;
    /** Alternative binding bound to value object property CParain(CParain). */
    public ICobolComplexBinding _cParain;
    /** Alternative binding bound to value object property CParaout(CParaout). */
    public ICobolComplexBinding _cParaout;

    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
    
    /**
     * Constructor for a Choice element.
     * 
     * @param bindingName the identifier for this binding
     * @param parentBinding a reference to the parent binding
     */
    public CBufferChoiceBinding(
            final String bindingName,
            final ICobolComplexBinding parentBinding) {
        
        super(bindingName, null, parentBinding);
        setUnmarshalChoiceStrategyClassName(
            "com.legstar.coxb.cust.redinout.ChoiceSelector");
        initAlternatives();
    }

    /** Creates a binding property for each alternative. */
    private void initAlternatives() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding alternatives instances */

        _cBuffer = BF.createStringBinding("CBuffer",
               "CBuffer", String.class, getParentBinding());
        _cBuffer.setCobolName("C-BUFFER");
        _cBuffer.setByteLength(500);
        _cBuffer.setUnmarshalChoiceStrategyClassName(
            "com.legstar.coxb.cust.redinout.ChoiceSelector");
        _cParain = new CParainBinding("CParain",
               "CParain", getParentBinding(), null);
        _cParain.setCobolName("C-PARAIN");
        _cParain.setByteLength(15);
        _cParain.setRedefines("C-BUFFER");
        _cParaout = new CParaoutBinding("CParaout",
               "CParaout", getParentBinding(), null);
        _cParaout.setCobolName("C-PARAOUT");
        _cParaout.setByteLength(25);
        _cParaout.setRedefines("C-BUFFER");

        /* Add alternatives to alternatives list */
        addAlternative(_cBuffer);
        addAlternative(_cParain);
        addAlternative(_cParaout);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
 
    /** {@inheritDoc} */
    public void setAlternativesValues() throws HostException {
        Object value;
        value = getDfhcommarea().getCBuffer();
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "CBuffer"
                    + " value=" + value);
        }
        _cBuffer.setObjectValue(value);
        value = getDfhcommarea().getCParain();
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "CParain"
                    + " value=" + value);
        }
        _cParain.setObjectValue(value);
        value = getDfhcommarea().getCParaout();
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "CParaout"
                    + " value=" + value);
        }
        _cParaout.setObjectValue(value);

    }
    /** {@inheritDoc} */
    public void setPropertyValue(
            final int index) throws HostException {
        /* Set the Value object property value from binding object */
        ICobolBinding alt = getAlternativesList().get(index);

      /* Alternatives that are not bound to a value object property are ignored.
       * This includes Choices and dynamically generated counters
       * for instance.  */
        if (!alt.isBound()) {
            return;
        }

        Object bindingValue = alt.getObjectValue(alt.getJaxbType());
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + alt.getJaxbName()
                    + " value=" + bindingValue);
        }
        switch (index) {
        case 0:
            getDfhcommarea().setCBuffer(
                (String) bindingValue);
            break;
        case 1:
            getDfhcommarea().setCParain(
                (CParain) bindingValue);
            break;
        case 2:
            getDfhcommarea().setCParaout(
                (CParaout) bindingValue);
            break;
        default:
            break;
        }
    }
    
    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? >  type) throws HostException {
        throw new HostException("Attempt to get value from choice binding "
                + getCobolName());
    }

    /** {@inheritDoc} */
    public void setObjectValue(final Object value) throws HostException {
        throw new HostException("Attempt to set value for choice binding "
                + getCobolName());
    }
    
    /** {@inheritDoc} */
    public boolean isSet() {
        /* A Choice is considered set if at least one of its alternatives
         * is set. */
        for (ICobolBinding alt : getAlternativesList()) {
            if (alt.isSet()) {
                return true;
            }
        }
        return false;
    }

    /** {@inheritDoc} */
    public Object getParentValueObject() throws HostException {
        return ((DfhcommareaBinding) getParentBinding()).getDfhcommarea();
    }

    /**
     * @return the Value object bound to the parent of this choice
     * @throws HostException if parent bound Value object cannot be retrieved
     */
    public Dfhcommarea getDfhcommarea() throws HostException {
        return (Dfhcommarea) getParentValueObject();
    }
    
}

