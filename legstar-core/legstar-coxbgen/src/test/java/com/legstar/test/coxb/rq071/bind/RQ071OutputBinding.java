


package com.legstar.test.coxb.rq071.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import java.math.BigDecimal;
import com.legstar.coxb.ICobolArrayComplexBinding;
import com.legstar.test.coxb.rq071.Eb017output_rq071__check;
import java.util.List;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.rq071.RQ071Output;
import com.legstar.test.coxb.rq071.ObjectFactory;

/**
 * LegStar Binding for Complex element :
 *   RQ071Output.
 * 
 * This class was generated by LegStar Binding generator.
 */
public class RQ071OutputBinding 
             extends CComplexBinding {

    /** Value object to which this cobol complex element is bound. */
    private RQ071Output mValueObject;
  
    /** Indicates that the associated Value object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedValueObject = false;
    
    /** Maximum host bytes size for this complex object. */
    private static final int BYTE_LENGTH = 636;
    
    /** Child bound to value object property Rq071__error__code(String). */
    public ICobolStringBinding _rq071__error__code;
    /** Child bound to value object property Rq071__total__bal(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__total__bal;
    /** Child bound to value object property Rq071__cst__tp__cd(String). */
    public ICobolStringBinding _rq071__cst__tp__cd;
    /** Child bound to value object property Rq071__open__date(String). */
    public ICobolStringBinding _rq071__open__date;
    /** Child bound to value object property Rq071__future__due(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__future__due;
    /** Child bound to value object property Rq071__current__due(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__current__due;
    /** Child bound to value object property Rq071__past__due__1(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__past__due__1;
    /** Child bound to value object property Rq071__past__due__2(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__past__due__2;
    /** Child bound to value object property Rq071__past__due__3(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__past__due__3;
    /** Child bound to value object property Rq071__cr__amnt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__cr__amnt;
    /** Child bound to value object property Rq071__total__bal__stmt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__total__bal__stmt;
    /** Child bound to value object property Rq071__future__due__stmt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__future__due__stmt;
    /** Child bound to value object property Rq071__current__due__stmt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__current__due__stmt;
    /** Child bound to value object property Rq071__past__due__1__stmt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__past__due__1__stmt;
    /** Child bound to value object property Rq071__past__due__2__stmt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__past__due__2__stmt;
    /** Child bound to value object property Rq071__past__due__3__stmt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__past__due__3__stmt;
    /** Child bound to value object property Rq071__cr__amnt__stmt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__cr__amnt__stmt;
    /** Child bound to value object property Rq071__check(Eb017output_rq071__check). */
    public ICobolArrayComplexBinding _rq071__checkWrapper;
    /** Binding item for complex array binding Eb017output_rq071__check. */
    public ICobolComplexBinding _rq071__checkWrapperItem;
    /** Child bound to value object property Rq071__last__stmnt__date(String). */
    public ICobolStringBinding _rq071__last__stmnt__date;
    /** Child bound to value object property Rq071__ar__term__desc(String). */
    public ICobolStringBinding _rq071__ar__term__desc;
    /** Child bound to value object property Rq071__amnt__due(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__amnt__due;
    /** Child bound to value object property Rq071__curr__disc(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__curr__disc;
    /** Child bound to value object property Rq071__avail__disc(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__avail__disc;
    /** Child bound to value object property Rq071__due__date(String). */
    public ICobolStringBinding _rq071__due__date;
    /** Child bound to value object property Rq071__final__due__amnt(BigDecimal). */
    public ICobolPackedDecimalBinding _rq071__final__due__amnt;
            
    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
 
    /** Static reference to Value object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Value object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mValueObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound Value object.
     */
    public RQ071OutputBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound Value object.
     * 
     * @param valueObject the concrete Value object instance bound to this
     *        complex element
     */
    public RQ071OutputBinding(
            final RQ071Output valueObject) {
        this("", "", null, valueObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated Value object.
    * 
    * @param bindingName the identifier for this binding
    * @param fieldName field name in parent Value object
    * @param valueObject the concrete Value object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public RQ071OutputBinding(
            final String bindingName,
            final String fieldName,
            final ICobolComplexBinding parentBinding,
            final RQ071Output valueObject) {
        
        super(bindingName, fieldName, RQ071Output.class, null, parentBinding);
        mValueObject = valueObject;
        if (mValueObject != null) {
            mUnusedValueObject = true;
        }
        initChildren();
        setByteLength(BYTE_LENGTH);
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding children instances */

        _rq071__error__code = BF.createStringBinding("Rq071__error__code",
               "Rq071__error__code", String.class, this);
        _rq071__error__code.setCobolName("rq071--error--code");
        _rq071__error__code.setByteLength(3);
        _rq071__total__bal = BF.createPackedDecimalBinding("Rq071__total__bal",
               "Rq071__total__bal", BigDecimal.class, this);
        _rq071__total__bal.setCobolName("rq071--total--bal");
        _rq071__total__bal.setByteLength(7);
        _rq071__total__bal.setTotalDigits(13);
        _rq071__total__bal.setFractionDigits(2);
        _rq071__total__bal.setIsSigned(true);
        _rq071__cst__tp__cd = BF.createStringBinding("Rq071__cst__tp__cd",
               "Rq071__cst__tp__cd", String.class, this);
        _rq071__cst__tp__cd.setCobolName("rq071--cst--tp--cd");
        _rq071__cst__tp__cd.setByteLength(2);
        _rq071__open__date = BF.createStringBinding("Rq071__open__date",
               "Rq071__open__date", String.class, this);
        _rq071__open__date.setCobolName("rq071--open--date");
        _rq071__open__date.setByteLength(10);
        _rq071__future__due = BF.createPackedDecimalBinding("Rq071__future__due",
               "Rq071__future__due", BigDecimal.class, this);
        _rq071__future__due.setCobolName("rq071--future--due");
        _rq071__future__due.setByteLength(7);
        _rq071__future__due.setTotalDigits(13);
        _rq071__future__due.setFractionDigits(2);
        _rq071__future__due.setIsSigned(true);
        _rq071__current__due = BF.createPackedDecimalBinding("Rq071__current__due",
               "Rq071__current__due", BigDecimal.class, this);
        _rq071__current__due.setCobolName("rq071--current--due");
        _rq071__current__due.setByteLength(7);
        _rq071__current__due.setTotalDigits(13);
        _rq071__current__due.setFractionDigits(2);
        _rq071__current__due.setIsSigned(true);
        _rq071__past__due__1 = BF.createPackedDecimalBinding("Rq071__past__due__1",
               "Rq071__past__due__1", BigDecimal.class, this);
        _rq071__past__due__1.setCobolName("rq071--past--due--1");
        _rq071__past__due__1.setByteLength(7);
        _rq071__past__due__1.setTotalDigits(13);
        _rq071__past__due__1.setFractionDigits(2);
        _rq071__past__due__1.setIsSigned(true);
        _rq071__past__due__2 = BF.createPackedDecimalBinding("Rq071__past__due__2",
               "Rq071__past__due__2", BigDecimal.class, this);
        _rq071__past__due__2.setCobolName("rq071--past--due--2");
        _rq071__past__due__2.setByteLength(7);
        _rq071__past__due__2.setTotalDigits(13);
        _rq071__past__due__2.setFractionDigits(2);
        _rq071__past__due__2.setIsSigned(true);
        _rq071__past__due__3 = BF.createPackedDecimalBinding("Rq071__past__due__3",
               "Rq071__past__due__3", BigDecimal.class, this);
        _rq071__past__due__3.setCobolName("rq071--past--due--3");
        _rq071__past__due__3.setByteLength(7);
        _rq071__past__due__3.setTotalDigits(13);
        _rq071__past__due__3.setFractionDigits(2);
        _rq071__past__due__3.setIsSigned(true);
        _rq071__cr__amnt = BF.createPackedDecimalBinding("Rq071__cr__amnt",
               "Rq071__cr__amnt", BigDecimal.class, this);
        _rq071__cr__amnt.setCobolName("rq071--cr--amnt");
        _rq071__cr__amnt.setByteLength(7);
        _rq071__cr__amnt.setTotalDigits(13);
        _rq071__cr__amnt.setFractionDigits(2);
        _rq071__cr__amnt.setIsSigned(true);
        _rq071__total__bal__stmt = BF.createPackedDecimalBinding("Rq071__total__bal__stmt",
               "Rq071__total__bal__stmt", BigDecimal.class, this);
        _rq071__total__bal__stmt.setCobolName("rq071--total--bal--stmt");
        _rq071__total__bal__stmt.setByteLength(7);
        _rq071__total__bal__stmt.setTotalDigits(13);
        _rq071__total__bal__stmt.setFractionDigits(2);
        _rq071__total__bal__stmt.setIsSigned(true);
        _rq071__future__due__stmt = BF.createPackedDecimalBinding("Rq071__future__due__stmt",
               "Rq071__future__due__stmt", BigDecimal.class, this);
        _rq071__future__due__stmt.setCobolName("rq071--future--due--stmt");
        _rq071__future__due__stmt.setByteLength(7);
        _rq071__future__due__stmt.setTotalDigits(13);
        _rq071__future__due__stmt.setFractionDigits(2);
        _rq071__future__due__stmt.setIsSigned(true);
        _rq071__current__due__stmt = BF.createPackedDecimalBinding("Rq071__current__due__stmt",
               "Rq071__current__due__stmt", BigDecimal.class, this);
        _rq071__current__due__stmt.setCobolName("rq071--current--due--stmt");
        _rq071__current__due__stmt.setByteLength(7);
        _rq071__current__due__stmt.setTotalDigits(13);
        _rq071__current__due__stmt.setFractionDigits(2);
        _rq071__current__due__stmt.setIsSigned(true);
        _rq071__past__due__1__stmt = BF.createPackedDecimalBinding("Rq071__past__due__1__stmt",
               "Rq071__past__due__1__stmt", BigDecimal.class, this);
        _rq071__past__due__1__stmt.setCobolName("rq071--past--due--1--stmt");
        _rq071__past__due__1__stmt.setByteLength(7);
        _rq071__past__due__1__stmt.setTotalDigits(13);
        _rq071__past__due__1__stmt.setFractionDigits(2);
        _rq071__past__due__1__stmt.setIsSigned(true);
        _rq071__past__due__2__stmt = BF.createPackedDecimalBinding("Rq071__past__due__2__stmt",
               "Rq071__past__due__2__stmt", BigDecimal.class, this);
        _rq071__past__due__2__stmt.setCobolName("rq071--past--due--2--stmt");
        _rq071__past__due__2__stmt.setByteLength(7);
        _rq071__past__due__2__stmt.setTotalDigits(13);
        _rq071__past__due__2__stmt.setFractionDigits(2);
        _rq071__past__due__2__stmt.setIsSigned(true);
        _rq071__past__due__3__stmt = BF.createPackedDecimalBinding("Rq071__past__due__3__stmt",
               "Rq071__past__due__3__stmt", BigDecimal.class, this);
        _rq071__past__due__3__stmt.setCobolName("rq071--past--due--3--stmt");
        _rq071__past__due__3__stmt.setByteLength(7);
        _rq071__past__due__3__stmt.setTotalDigits(13);
        _rq071__past__due__3__stmt.setFractionDigits(2);
        _rq071__past__due__3__stmt.setIsSigned(true);
        _rq071__cr__amnt__stmt = BF.createPackedDecimalBinding("Rq071__cr__amnt__stmt",
               "Rq071__cr__amnt__stmt", BigDecimal.class, this);
        _rq071__cr__amnt__stmt.setCobolName("rq071--cr--amnt--stmt");
        _rq071__cr__amnt__stmt.setByteLength(7);
        _rq071__cr__amnt__stmt.setTotalDigits(13);
        _rq071__cr__amnt__stmt.setFractionDigits(2);
        _rq071__cr__amnt__stmt.setIsSigned(true);
        _rq071__checkWrapperItem = new Eb017output_rq071__checkBinding("Rq071__checkWrapperItem",
               "Rq071__check", this, null);
        _rq071__checkWrapper = new Eb017output_rq071__checkWrapperBinding("Rq071__checkWrapper",
               "Rq071__check", this, _rq071__checkWrapperItem);
        _rq071__checkWrapper.setCobolName("rq071--check");
        _rq071__checkWrapper.setByteLength(435);
        _rq071__checkWrapper.setItemByteLength(29);
        _rq071__checkWrapper.setMinOccurs(15);
        _rq071__checkWrapper.setMaxOccurs(15);
        _rq071__last__stmnt__date = BF.createStringBinding("Rq071__last__stmnt__date",
               "Rq071__last__stmnt__date", String.class, this);
        _rq071__last__stmnt__date.setCobolName("rq071--last--stmnt--date");
        _rq071__last__stmnt__date.setByteLength(10);
        _rq071__ar__term__desc = BF.createStringBinding("Rq071__ar__term__desc",
               "Rq071__ar__term__desc", String.class, this);
        _rq071__ar__term__desc.setCobolName("rq071--ar--term--desc");
        _rq071__ar__term__desc.setByteLength(40);
        _rq071__amnt__due = BF.createPackedDecimalBinding("Rq071__amnt__due",
               "Rq071__amnt__due", BigDecimal.class, this);
        _rq071__amnt__due.setCobolName("rq071--amnt--due");
        _rq071__amnt__due.setByteLength(7);
        _rq071__amnt__due.setTotalDigits(13);
        _rq071__amnt__due.setFractionDigits(2);
        _rq071__amnt__due.setIsSigned(true);
        _rq071__curr__disc = BF.createPackedDecimalBinding("Rq071__curr__disc",
               "Rq071__curr__disc", BigDecimal.class, this);
        _rq071__curr__disc.setCobolName("rq071--curr--disc");
        _rq071__curr__disc.setByteLength(7);
        _rq071__curr__disc.setTotalDigits(13);
        _rq071__curr__disc.setFractionDigits(2);
        _rq071__curr__disc.setIsSigned(true);
        _rq071__avail__disc = BF.createPackedDecimalBinding("Rq071__avail__disc",
               "Rq071__avail__disc", BigDecimal.class, this);
        _rq071__avail__disc.setCobolName("rq071--avail--disc");
        _rq071__avail__disc.setByteLength(7);
        _rq071__avail__disc.setTotalDigits(13);
        _rq071__avail__disc.setFractionDigits(2);
        _rq071__avail__disc.setIsSigned(true);
        _rq071__due__date = BF.createStringBinding("Rq071__due__date",
               "Rq071__due__date", String.class, this);
        _rq071__due__date.setCobolName("rq071--due--date");
        _rq071__due__date.setByteLength(10);
        _rq071__final__due__amnt = BF.createPackedDecimalBinding("Rq071__final__due__amnt",
               "Rq071__final__due__amnt", BigDecimal.class, this);
        _rq071__final__due__amnt.setCobolName("rq071--final--due--amnt");
        _rq071__final__due__amnt.setByteLength(7);
        _rq071__final__due__amnt.setTotalDigits(13);
        _rq071__final__due__amnt.setFractionDigits(2);
        _rq071__final__due__amnt.setIsSigned(true);

        /* Add children to children list */
        getChildrenList().add(_rq071__error__code);
        getChildrenList().add(_rq071__total__bal);
        getChildrenList().add(_rq071__cst__tp__cd);
        getChildrenList().add(_rq071__open__date);
        getChildrenList().add(_rq071__future__due);
        getChildrenList().add(_rq071__current__due);
        getChildrenList().add(_rq071__past__due__1);
        getChildrenList().add(_rq071__past__due__2);
        getChildrenList().add(_rq071__past__due__3);
        getChildrenList().add(_rq071__cr__amnt);
        getChildrenList().add(_rq071__total__bal__stmt);
        getChildrenList().add(_rq071__future__due__stmt);
        getChildrenList().add(_rq071__current__due__stmt);
        getChildrenList().add(_rq071__past__due__1__stmt);
        getChildrenList().add(_rq071__past__due__2__stmt);
        getChildrenList().add(_rq071__past__due__3__stmt);
        getChildrenList().add(_rq071__cr__amnt__stmt);
        getChildrenList().add(_rq071__checkWrapper);
        getChildrenList().add(_rq071__last__stmnt__date);
        getChildrenList().add(_rq071__ar__term__desc);
        getChildrenList().add(_rq071__amnt__due);
        getChildrenList().add(_rq071__curr__disc);
        getChildrenList().add(_rq071__avail__disc);
        getChildrenList().add(_rq071__due__date);
        getChildrenList().add(_rq071__final__due__amnt);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public void createValueObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
        if (mUnusedValueObject && mValueObject != null) {
            mUnusedValueObject = false;
            return;
        }
        mValueObject = mValueObjectFactory.createRQ071Output();
    }

    /** {@inheritDoc} */
    public void setChildrenValues() throws HostException {

         /* Make sure there is an associated Value object*/
        if (mValueObject == null) {
            createValueObject();
        }
        /* Get Value object property _rq071__error__code */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__error__code"
                    + " value=" + mValueObject.getRq071__error__code());
        }
        _rq071__error__code.setObjectValue(mValueObject.getRq071__error__code());
        /* Get Value object property _rq071__total__bal */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__total__bal"
                    + " value=" + mValueObject.getRq071__total__bal());
        }
        _rq071__total__bal.setObjectValue(mValueObject.getRq071__total__bal());
        /* Get Value object property _rq071__cst__tp__cd */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__cst__tp__cd"
                    + " value=" + mValueObject.getRq071__cst__tp__cd());
        }
        _rq071__cst__tp__cd.setObjectValue(mValueObject.getRq071__cst__tp__cd());
        /* Get Value object property _rq071__open__date */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__open__date"
                    + " value=" + mValueObject.getRq071__open__date());
        }
        _rq071__open__date.setObjectValue(mValueObject.getRq071__open__date());
        /* Get Value object property _rq071__future__due */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__future__due"
                    + " value=" + mValueObject.getRq071__future__due());
        }
        _rq071__future__due.setObjectValue(mValueObject.getRq071__future__due());
        /* Get Value object property _rq071__current__due */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__current__due"
                    + " value=" + mValueObject.getRq071__current__due());
        }
        _rq071__current__due.setObjectValue(mValueObject.getRq071__current__due());
        /* Get Value object property _rq071__past__due__1 */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__past__due__1"
                    + " value=" + mValueObject.getRq071__past__due__1());
        }
        _rq071__past__due__1.setObjectValue(mValueObject.getRq071__past__due__1());
        /* Get Value object property _rq071__past__due__2 */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__past__due__2"
                    + " value=" + mValueObject.getRq071__past__due__2());
        }
        _rq071__past__due__2.setObjectValue(mValueObject.getRq071__past__due__2());
        /* Get Value object property _rq071__past__due__3 */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__past__due__3"
                    + " value=" + mValueObject.getRq071__past__due__3());
        }
        _rq071__past__due__3.setObjectValue(mValueObject.getRq071__past__due__3());
        /* Get Value object property _rq071__cr__amnt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__cr__amnt"
                    + " value=" + mValueObject.getRq071__cr__amnt());
        }
        _rq071__cr__amnt.setObjectValue(mValueObject.getRq071__cr__amnt());
        /* Get Value object property _rq071__total__bal__stmt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__total__bal__stmt"
                    + " value=" + mValueObject.getRq071__total__bal__stmt());
        }
        _rq071__total__bal__stmt.setObjectValue(mValueObject.getRq071__total__bal__stmt());
        /* Get Value object property _rq071__future__due__stmt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__future__due__stmt"
                    + " value=" + mValueObject.getRq071__future__due__stmt());
        }
        _rq071__future__due__stmt.setObjectValue(mValueObject.getRq071__future__due__stmt());
        /* Get Value object property _rq071__current__due__stmt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__current__due__stmt"
                    + " value=" + mValueObject.getRq071__current__due__stmt());
        }
        _rq071__current__due__stmt.setObjectValue(mValueObject.getRq071__current__due__stmt());
        /* Get Value object property _rq071__past__due__1__stmt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__past__due__1__stmt"
                    + " value=" + mValueObject.getRq071__past__due__1__stmt());
        }
        _rq071__past__due__1__stmt.setObjectValue(mValueObject.getRq071__past__due__1__stmt());
        /* Get Value object property _rq071__past__due__2__stmt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__past__due__2__stmt"
                    + " value=" + mValueObject.getRq071__past__due__2__stmt());
        }
        _rq071__past__due__2__stmt.setObjectValue(mValueObject.getRq071__past__due__2__stmt());
        /* Get Value object property _rq071__past__due__3__stmt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__past__due__3__stmt"
                    + " value=" + mValueObject.getRq071__past__due__3__stmt());
        }
        _rq071__past__due__3__stmt.setObjectValue(mValueObject.getRq071__past__due__3__stmt());
        /* Get Value object property _rq071__cr__amnt__stmt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__cr__amnt__stmt"
                    + " value=" + mValueObject.getRq071__cr__amnt__stmt());
        }
        _rq071__cr__amnt__stmt.setObjectValue(mValueObject.getRq071__cr__amnt__stmt());
        /* Get Value object property _rq071__checkWrapper */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__checkWrapper"
                    + " value=" + mValueObject.getRq071__check());
        }
        _rq071__checkWrapper.setObjectValue(java.util.Arrays
               .asList(mValueObject.getRq071__check()));
        /* Get Value object property _rq071__last__stmnt__date */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__last__stmnt__date"
                    + " value=" + mValueObject.getRq071__last__stmnt__date());
        }
        _rq071__last__stmnt__date.setObjectValue(mValueObject.getRq071__last__stmnt__date());
        /* Get Value object property _rq071__ar__term__desc */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__ar__term__desc"
                    + " value=" + mValueObject.getRq071__ar__term__desc());
        }
        _rq071__ar__term__desc.setObjectValue(mValueObject.getRq071__ar__term__desc());
        /* Get Value object property _rq071__amnt__due */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__amnt__due"
                    + " value=" + mValueObject.getRq071__amnt__due());
        }
        _rq071__amnt__due.setObjectValue(mValueObject.getRq071__amnt__due());
        /* Get Value object property _rq071__curr__disc */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__curr__disc"
                    + " value=" + mValueObject.getRq071__curr__disc());
        }
        _rq071__curr__disc.setObjectValue(mValueObject.getRq071__curr__disc());
        /* Get Value object property _rq071__avail__disc */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__avail__disc"
                    + " value=" + mValueObject.getRq071__avail__disc());
        }
        _rq071__avail__disc.setObjectValue(mValueObject.getRq071__avail__disc());
        /* Get Value object property _rq071__due__date */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__due__date"
                    + " value=" + mValueObject.getRq071__due__date());
        }
        _rq071__due__date.setObjectValue(mValueObject.getRq071__due__date());
        /* Get Value object property _rq071__final__due__amnt */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_rq071__final__due__amnt"
                    + " value=" + mValueObject.getRq071__final__due__amnt());
        }
        _rq071__final__due__amnt.setObjectValue(mValueObject.getRq071__final__due__amnt());
     }

    /** {@inheritDoc} */
    public void setPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        /* Set the Value object property value from binding object */
        Object bindingValue = null;
        switch (index) {
        case 0:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setRq071__error__code((String) bindingValue);
            break;
        case 1:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__total__bal((BigDecimal) bindingValue);
            break;
        case 2:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setRq071__cst__tp__cd((String) bindingValue);
            break;
        case 3:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setRq071__open__date((String) bindingValue);
            break;
        case 4:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__future__due((BigDecimal) bindingValue);
            break;
        case 5:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__current__due((BigDecimal) bindingValue);
            break;
        case 6:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__past__due__1((BigDecimal) bindingValue);
            break;
        case 7:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__past__due__2((BigDecimal) bindingValue);
            break;
        case 8:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__past__due__3((BigDecimal) bindingValue);
            break;
        case 9:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__cr__amnt((BigDecimal) bindingValue);
            break;
        case 10:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__total__bal__stmt((BigDecimal) bindingValue);
            break;
        case 11:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__future__due__stmt((BigDecimal) bindingValue);
            break;
        case 12:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__current__due__stmt((BigDecimal) bindingValue);
            break;
        case 13:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__past__due__1__stmt((BigDecimal) bindingValue);
            break;
        case 14:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__past__due__2__stmt((BigDecimal) bindingValue);
            break;
        case 15:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__past__due__3__stmt((BigDecimal) bindingValue);
            break;
        case 16:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__cr__amnt__stmt((BigDecimal) bindingValue);
            break;
        case 17:
            bindingValue = child.getObjectValue(Eb017output_rq071__check.class);
            List < Eb017output_rq071__check > listRq071__checkWrapper = cast(bindingValue);
            mValueObject.setRq071__check(listRq071__checkWrapper.toArray(
            		new Eb017output_rq071__check[] {}));
            break;
        case 18:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setRq071__last__stmnt__date((String) bindingValue);
            break;
        case 19:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setRq071__ar__term__desc((String) bindingValue);
            break;
        case 20:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__amnt__due((BigDecimal) bindingValue);
            break;
        case 21:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__curr__disc((BigDecimal) bindingValue);
            break;
        case 22:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__avail__disc((BigDecimal) bindingValue);
            break;
        case 23:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setRq071__due__date((String) bindingValue);
            break;
        case 24:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setRq071__final__due__amnt((BigDecimal) bindingValue);
            break;
         default:
            break;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
    }

    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(RQ071Output.class)) {
            return mValueObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mValueObject = null;
            return;
        }
        if (bindingValue.getClass().equals(RQ071Output.class)) {
            mValueObject = (RQ071Output) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public ObjectFactory getObjectFactory() {
        return mValueObjectFactory;
    }

    /**
     * @param valueObjectFactory the java object factory for objects creation 
     */
    public void setObjectFactory(final Object valueObjectFactory) {
        mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

    /** {@inheritDoc} */
    public boolean isSet() {
        return (mValueObject != null);
    }

    /**
     * @return the bound Value object
     */
    public RQ071Output getRQ071Output() {
        return mValueObject;
    }
    
    /**
     * The COBOL complex element maximum length in bytes.
     * 
     * @return COBOL complex element maximum length in bytes
     */
    public int getByteLength() {
        return BYTE_LENGTH;
    }
}

