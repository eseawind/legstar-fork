


package com.legstar.test.coxb.valuemix.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolZonedDecimalBinding;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import java.math.BigDecimal;
import com.legstar.coxb.ICobolFloatBinding;
import com.legstar.coxb.ICobolDoubleBinding;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.valuemix.Dfhcommarea;
import com.legstar.test.coxb.valuemix.ObjectFactory;

/**
 * LegStar Binding for Complex element :
 *   Dfhcommarea.
 * 
 * This class was generated by LegStar Binding generator.
 */
public class DfhcommareaBinding 
             extends CComplexBinding {

    /** Value object to which this cobol complex element is bound. */
    private Dfhcommarea mValueObject;
  
    /** Indicates that the associated Value object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedValueObject = false;
    
    /** Maximum host bytes size for this complex object. */
    private static final int BYTE_LENGTH = 96;
    
    /** Child bound to value object property WsZero(Long). */
    public ICobolZonedDecimalBinding _wsZero;
    /** Child bound to value object property WsZeros(Long). */
    public ICobolZonedDecimalBinding _wsZeros;
    /** Child bound to value object property WsZeroes(Long). */
    public ICobolZonedDecimalBinding _wsZeroes;
    /** Child bound to value object property WsSpace(String). */
    public ICobolStringBinding _wsSpace;
    /** Child bound to value object property WsSpaces(String). */
    public ICobolStringBinding _wsSpaces;
    /** Child bound to value object property WsHighValue(String). */
    public ICobolStringBinding _wsHighValue;
    /** Child bound to value object property WsHighValues(String). */
    public ICobolStringBinding _wsHighValues;
    /** Child bound to value object property WsLowValue(String). */
    public ICobolStringBinding _wsLowValue;
    /** Child bound to value object property WsLowValues(String). */
    public ICobolStringBinding _wsLowValues;
    /** Child bound to value object property WsQuote(String). */
    public ICobolStringBinding _wsQuote;
    /** Child bound to value object property WsQuotes(String). */
    public ICobolStringBinding _wsQuotes;
    /** Child bound to value object property WsNull(String). */
    public ICobolStringBinding _wsNull;
    /** Child bound to value object property WsNulls(String). */
    public ICobolStringBinding _wsNulls;
    /** Child bound to value object property WsString(String). */
    public ICobolStringBinding _wsString;
    /** Child bound to value object property WsNumeric(Integer). */
    public ICobolZonedDecimalBinding _wsNumeric;
    /** Child bound to value object property WsPackedDecimal(BigDecimal). */
    public ICobolPackedDecimalBinding _wsPackedDecimal;
    /** Child bound to value object property WsSingleFloat(Float). */
    public ICobolFloatBinding _wsSingleFloat;
    /** Child bound to value object property WsDoubleFloat(Double). */
    public ICobolDoubleBinding _wsDoubleFloat;
            
    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
 
    /** Static reference to Value object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Value object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mValueObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound Value object.
     */
    public DfhcommareaBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound Value object.
     * 
     * @param valueObject the concrete Value object instance bound to this
     *        complex element
     */
    public DfhcommareaBinding(
            final Dfhcommarea valueObject) {
        this("", "", null, valueObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated Value object.
    * 
    * @param bindingName the identifier for this binding
    * @param fieldName field name in parent Value object
    * @param valueObject the concrete Value object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public DfhcommareaBinding(
            final String bindingName,
            final String fieldName,
            final ICobolComplexBinding parentBinding,
            final Dfhcommarea valueObject) {
        
        super(bindingName, fieldName, Dfhcommarea.class, null, parentBinding);
        mValueObject = valueObject;
        if (mValueObject != null) {
            mUnusedValueObject = true;
        }
        initChildren();
        setByteLength(BYTE_LENGTH);
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding children instances */

        _wsZero = BF.createZonedDecimalBinding("WsZero",
               "WsZero", Long.class, this);
        _wsZero.setCobolName("WS-ZERO");
        _wsZero.setByteLength(5);
        _wsZero.setTotalDigits(5);
        _wsZeros = BF.createZonedDecimalBinding("WsZeros",
               "WsZeros", Long.class, this);
        _wsZeros.setCobolName("WS-ZEROS");
        _wsZeros.setByteLength(5);
        _wsZeros.setTotalDigits(5);
        _wsZeroes = BF.createZonedDecimalBinding("WsZeroes",
               "WsZeroes", Long.class, this);
        _wsZeroes.setCobolName("WS-ZEROES");
        _wsZeroes.setByteLength(5);
        _wsZeroes.setTotalDigits(5);
        _wsSpace = BF.createStringBinding("WsSpace",
               "WsSpace", String.class, this);
        _wsSpace.setCobolName("WS-SPACE");
        _wsSpace.setByteLength(5);
        _wsSpaces = BF.createStringBinding("WsSpaces",
               "WsSpaces", String.class, this);
        _wsSpaces.setCobolName("WS-SPACES");
        _wsSpaces.setByteLength(5);
        _wsHighValue = BF.createStringBinding("WsHighValue",
               "WsHighValue", String.class, this);
        _wsHighValue.setCobolName("WS-HIGH-VALUE");
        _wsHighValue.setByteLength(5);
        _wsHighValues = BF.createStringBinding("WsHighValues",
               "WsHighValues", String.class, this);
        _wsHighValues.setCobolName("WS-HIGH-VALUES");
        _wsHighValues.setByteLength(5);
        _wsLowValue = BF.createStringBinding("WsLowValue",
               "WsLowValue", String.class, this);
        _wsLowValue.setCobolName("WS-LOW-VALUE");
        _wsLowValue.setByteLength(5);
        _wsLowValues = BF.createStringBinding("WsLowValues",
               "WsLowValues", String.class, this);
        _wsLowValues.setCobolName("WS-LOW-VALUES");
        _wsLowValues.setByteLength(5);
        _wsQuote = BF.createStringBinding("WsQuote",
               "WsQuote", String.class, this);
        _wsQuote.setCobolName("WS-QUOTE");
        _wsQuote.setByteLength(5);
        _wsQuotes = BF.createStringBinding("WsQuotes",
               "WsQuotes", String.class, this);
        _wsQuotes.setCobolName("WS-QUOTES");
        _wsQuotes.setByteLength(5);
        _wsNull = BF.createStringBinding("WsNull",
               "WsNull", String.class, this);
        _wsNull.setCobolName("WS-NULL");
        _wsNull.setByteLength(5);
        _wsNulls = BF.createStringBinding("WsNulls",
               "WsNulls", String.class, this);
        _wsNulls.setCobolName("WS-NULLS");
        _wsNulls.setByteLength(5);
        _wsString = BF.createStringBinding("WsString",
               "WsString", String.class, this);
        _wsString.setCobolName("WS-STRING");
        _wsString.setByteLength(5);
        _wsNumeric = BF.createZonedDecimalBinding("WsNumeric",
               "WsNumeric", Integer.class, this);
        _wsNumeric.setCobolName("WS-NUMERIC");
        _wsNumeric.setByteLength(5);
        _wsNumeric.setTotalDigits(5);
        _wsNumeric.setIsSigned(true);
        _wsPackedDecimal = BF.createPackedDecimalBinding("WsPackedDecimal",
               "WsPackedDecimal", BigDecimal.class, this);
        _wsPackedDecimal.setCobolName("WS-PACKED-DECIMAL");
        _wsPackedDecimal.setByteLength(9);
        _wsPackedDecimal.setTotalDigits(17);
        _wsPackedDecimal.setFractionDigits(2);
        _wsPackedDecimal.setIsSigned(true);
        _wsSingleFloat = BF.createFloatBinding("WsSingleFloat",
               "WsSingleFloat", Float.class, this);
        _wsSingleFloat.setCobolName("WS-SINGLE-FLOAT");
        _wsSingleFloat.setByteLength(4);
        _wsDoubleFloat = BF.createDoubleBinding("WsDoubleFloat",
               "WsDoubleFloat", Double.class, this);
        _wsDoubleFloat.setCobolName("WS-DOUBLE-FLOAT");
        _wsDoubleFloat.setByteLength(8);

        /* Add children to children list */
        getChildrenList().add(_wsZero);
        getChildrenList().add(_wsZeros);
        getChildrenList().add(_wsZeroes);
        getChildrenList().add(_wsSpace);
        getChildrenList().add(_wsSpaces);
        getChildrenList().add(_wsHighValue);
        getChildrenList().add(_wsHighValues);
        getChildrenList().add(_wsLowValue);
        getChildrenList().add(_wsLowValues);
        getChildrenList().add(_wsQuote);
        getChildrenList().add(_wsQuotes);
        getChildrenList().add(_wsNull);
        getChildrenList().add(_wsNulls);
        getChildrenList().add(_wsString);
        getChildrenList().add(_wsNumeric);
        getChildrenList().add(_wsPackedDecimal);
        getChildrenList().add(_wsSingleFloat);
        getChildrenList().add(_wsDoubleFloat);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public void createValueObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
        if (mUnusedValueObject && mValueObject != null) {
            mUnusedValueObject = false;
            return;
        }
        mValueObject = mValueObjectFactory.createDfhcommarea();
    }

    /** {@inheritDoc} */
    public void setChildrenValues() throws HostException {

         /* Make sure there is an associated Value object*/
        if (mValueObject == null) {
            createValueObject();
        }
        /* Get Value object property _wsZero */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsZero"
                    + " value=" + mValueObject.getWsZero());
        }
        _wsZero.setObjectValue(mValueObject.getWsZero());
        /* Get Value object property _wsZeros */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsZeros"
                    + " value=" + mValueObject.getWsZeros());
        }
        _wsZeros.setObjectValue(mValueObject.getWsZeros());
        /* Get Value object property _wsZeroes */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsZeroes"
                    + " value=" + mValueObject.getWsZeroes());
        }
        _wsZeroes.setObjectValue(mValueObject.getWsZeroes());
        /* Get Value object property _wsSpace */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsSpace"
                    + " value=" + mValueObject.getWsSpace());
        }
        _wsSpace.setObjectValue(mValueObject.getWsSpace());
        /* Get Value object property _wsSpaces */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsSpaces"
                    + " value=" + mValueObject.getWsSpaces());
        }
        _wsSpaces.setObjectValue(mValueObject.getWsSpaces());
        /* Get Value object property _wsHighValue */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsHighValue"
                    + " value=" + mValueObject.getWsHighValue());
        }
        _wsHighValue.setObjectValue(mValueObject.getWsHighValue());
        /* Get Value object property _wsHighValues */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsHighValues"
                    + " value=" + mValueObject.getWsHighValues());
        }
        _wsHighValues.setObjectValue(mValueObject.getWsHighValues());
        /* Get Value object property _wsLowValue */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsLowValue"
                    + " value=" + mValueObject.getWsLowValue());
        }
        _wsLowValue.setObjectValue(mValueObject.getWsLowValue());
        /* Get Value object property _wsLowValues */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsLowValues"
                    + " value=" + mValueObject.getWsLowValues());
        }
        _wsLowValues.setObjectValue(mValueObject.getWsLowValues());
        /* Get Value object property _wsQuote */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsQuote"
                    + " value=" + mValueObject.getWsQuote());
        }
        _wsQuote.setObjectValue(mValueObject.getWsQuote());
        /* Get Value object property _wsQuotes */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsQuotes"
                    + " value=" + mValueObject.getWsQuotes());
        }
        _wsQuotes.setObjectValue(mValueObject.getWsQuotes());
        /* Get Value object property _wsNull */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsNull"
                    + " value=" + mValueObject.getWsNull());
        }
        _wsNull.setObjectValue(mValueObject.getWsNull());
        /* Get Value object property _wsNulls */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsNulls"
                    + " value=" + mValueObject.getWsNulls());
        }
        _wsNulls.setObjectValue(mValueObject.getWsNulls());
        /* Get Value object property _wsString */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsString"
                    + " value=" + mValueObject.getWsString());
        }
        _wsString.setObjectValue(mValueObject.getWsString());
        /* Get Value object property _wsNumeric */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsNumeric"
                    + " value=" + mValueObject.getWsNumeric());
        }
        _wsNumeric.setObjectValue(mValueObject.getWsNumeric());
        /* Get Value object property _wsPackedDecimal */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsPackedDecimal"
                    + " value=" + mValueObject.getWsPackedDecimal());
        }
        _wsPackedDecimal.setObjectValue(mValueObject.getWsPackedDecimal());
        /* Get Value object property _wsSingleFloat */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsSingleFloat"
                    + " value=" + mValueObject.getWsSingleFloat());
        }
        _wsSingleFloat.setObjectValue(mValueObject.getWsSingleFloat());
        /* Get Value object property _wsDoubleFloat */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_wsDoubleFloat"
                    + " value=" + mValueObject.getWsDoubleFloat());
        }
        _wsDoubleFloat.setObjectValue(mValueObject.getWsDoubleFloat());
     }

    /** {@inheritDoc} */
    public void setPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        /* Set the Value object property value from binding object */
        Object bindingValue = null;
        switch (index) {
        case 0:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setWsZero((Long) bindingValue);
            break;
        case 1:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setWsZeros((Long) bindingValue);
            break;
        case 2:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setWsZeroes((Long) bindingValue);
            break;
        case 3:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsSpace((String) bindingValue);
            break;
        case 4:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsSpaces((String) bindingValue);
            break;
        case 5:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsHighValue((String) bindingValue);
            break;
        case 6:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsHighValues((String) bindingValue);
            break;
        case 7:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsLowValue((String) bindingValue);
            break;
        case 8:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsLowValues((String) bindingValue);
            break;
        case 9:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsQuote((String) bindingValue);
            break;
        case 10:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsQuotes((String) bindingValue);
            break;
        case 11:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsNull((String) bindingValue);
            break;
        case 12:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsNulls((String) bindingValue);
            break;
        case 13:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setWsString((String) bindingValue);
            break;
        case 14:
            bindingValue = child.getObjectValue(Integer.class);
            mValueObject.setWsNumeric((Integer) bindingValue);
            break;
        case 15:
            bindingValue = child.getObjectValue(BigDecimal.class);
            mValueObject.setWsPackedDecimal((BigDecimal) bindingValue);
            break;
        case 16:
            bindingValue = child.getObjectValue(Float.class);
            mValueObject.setWsSingleFloat((Float) bindingValue);
            break;
        case 17:
            bindingValue = child.getObjectValue(Double.class);
            mValueObject.setWsDoubleFloat((Double) bindingValue);
            break;
         default:
            break;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
    }

    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(Dfhcommarea.class)) {
            return mValueObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mValueObject = null;
            return;
        }
        if (bindingValue.getClass().equals(Dfhcommarea.class)) {
            mValueObject = (Dfhcommarea) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public ObjectFactory getObjectFactory() {
        return mValueObjectFactory;
    }

    /**
     * @param valueObjectFactory the java object factory for objects creation 
     */
    public void setObjectFactory(final Object valueObjectFactory) {
        mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

    /** {@inheritDoc} */
    public boolean isSet() {
        return (mValueObject != null);
    }

    /**
     * @return the bound Value object
     */
    public Dfhcommarea getDfhcommarea() {
        return mValueObject;
    }
    
    /**
     * The COBOL complex element maximum length in bytes.
     * 
     * @return COBOL complex element maximum length in bytes
     */
    public int getByteLength() {
        return BYTE_LENGTH;
    }
}

