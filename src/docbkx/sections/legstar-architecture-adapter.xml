<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="architecture-adapter">
<title>Expose a COBOL program as a Web Service</title>
<section>
<title>Development tools</title>
<para>
  With LegStar, developers would follow these three steps to <emphasis>Service-enable</emphasis> a COBOL
  program:
</para>
<figure>
<title>Service adapter development steps</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/legstar-dev-inbound.jpg" format="JPG" scalefit="1" width="100%" contentdepth="100%"/>
</imageobject>
</mediaobject>
</figure>
<para>
  In this use case, initial COBOL code fragments describe the legacy program input and output structures.
</para>
<para>
  The LegStar <emphasis>COBOL Structures to XML Schema Translator</emphasis> takes a COBOL fragment as input and
  creates an XML Schema with COBOL annotations. This generated XML Schema is known as a Mapping XML Schema
  since the COBOL annotations form the meta-data that maps each COBOL data item to an XML element type. 
</para>
<para>
  Some COBOL programs accept several input structures and several output structures,
  each described by a different code fragment. This step can therefore be repeated as
  necessary for each COBOL code fragment involved.
</para>
<para>
  The generated XML Schema can be customized, and further annotated, by developers using standard XML Schema
  editors. In particular, developers can specify custom processing to deal with complex decisions related
  with COBOL REDEFINES for instance.
</para>
<para>
  The LegStar <emphasis>COBOL Transformers Generator</emphasis> takes a Mapping XML Schema as input and produces
  a set of Java Classes. These generated classes are all that is needed for the runtime to perform 
  Java, XML or JSON to mainframe data marshaling/unmarshaling.
</para>
<para>
  The meta data that binds java fields to COBOL data items is stored as java annotations in a set of
  JAXB classes.
</para>
<para>
  At runtime, mainframe data described by the initial COBOL fragment is typically encoded in
  a mainframe character set (EBCDIC) and contain compressed numerics and other mainframe
  specific formatted data. Conversion is totally bi-directional and completely independent of the
  origin or destination of the host data. 
</para>
<para>
  The LegStar <emphasis>Mainframe Service Generator</emphasis>, maps a mainframe program to a Web Service
  operation or Java method.
  The current version of LegStar supports CICS programs either Commarea or Container driven.
</para>
<para>
  It is important to note that the tools behind each step are completely independent from each other.
  For instance, without an initial COBOL code fragment, developers could start from an XML Schema, edit the
  XML Schema to add COBOL binding annotations and then
  continue the remaining steps. This is not an uncommon use case, where the mainframe program is actually new
  and the starting point is an XML schema (An approach sometimes referred to as Contract-first).
</para>
<para>
  For each of these steps, LegStar provides both Ant scripts and Eclipse plug-ins. Moving forward,
  the Eclipse plugins are the recommended tool as the parameter set needed by generators keeps increasing.
</para>
</section>

<section>
<title>Runtime services</title>
<para>
  From a runtime perspective, this is how a request/reply message exchange would flow in an IBM CICS
  environment:
</para>
<figure>
<title>Service adapter runtime</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/legstar-run-inbound.jpg" format="JPG"/>
</imageobject>
</mediaobject>
</figure>
<para>
  Starting from a Web Service client, SOAP requests are first processed by a standard Web Service stack.
  The LegStar-generated endpoint uses the JAX-WS standard API to communicate with the SOAP stack. 
</para>
<para>
  The XML payload extracted from SOAP requests is handed over by JAX-WS to the standard JAXB binding
  framework, which uses the LegStar-generated JAXB classes to parse the XML and produce a value object.
  The adapter endpoint implementation uses the LegStar <emphasis>COBOL Binding Runtime</emphasis> to
  transform java value objects to a mainframe payload. This transformation includes Unicode to EBCDIC
  conversions, numeric conversions, REDEFINES decision-making, etcâ€¦
</para>
<para>
  Once data is in mainframe format, the endpoint uses a transport independent layer called LegStar
  <emphasis>Mainframe Adapter Runtime</emphasis> to invoke a remote program.
</para>
<para>
  The LegStar <emphasis>Messaging Protocol</emphasis> used by the Mainframe Adapter Runtime is binary and
  implements a request/reply exchange pattern. It is designed to reduce the payload size and supports
  multiple input/output named structures such as CICS containers.
  Alternatively, the adapter runtime can use transport specific messaging protocols such as IBM
  CICS MQ Bridge.
</para>
<para>
  The actual transport is selected at runtime from a configuration file. The following options are
  available:
</para>
<itemizedlist>
<listitem>
<para>
    Socket transport
</para>
</listitem>
<listitem>
<para>
    HTTP transport
</para>
</listitem>
<listitem>
<para>
    WebSphere MQ transport
</para>
</listitem>
</itemizedlist>
<para>
  When needed, LegStar provides z/OS modules, written in C/370 for CICS, to handle messaging on the
  Mainframe side (Not needed with CICS Websphere MQ Bridge).
  The CICS footprint of this architecture is minimal since all SOAP/XML processing occur off-host.
</para>
<para>
  Any of the available transports can be used in a direct or pooled fashion. Pooling of connections,
  offered by LegStar <emphasis>Connection Pooling Engine</emphasis>, allows efficient connection reuse
  and enhances performances.
</para>
<para>
  On the way back, mainframe data is converted to XML and then wrapped in a SOAP reply.
</para>
</section>

</section>
