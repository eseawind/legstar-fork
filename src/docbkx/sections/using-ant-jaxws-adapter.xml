<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="jaxwsgen-using-ant-adapter">
<title>Mainframe Adapter generation</title>
<para>
  The final step in the process is to generate a Mainframe Adapter, which is a JAX-WS Endpoint.
</para>
<para>
  You can use the <emphasis>build-jws2cixs.xml</emphasis> ant script from the
  samples/quickstarts/adapter_lsfileae folder as your starting point.
</para>
<para>
  The sample script produces several artifacts and is primarily a single step script running
  the jaxws2cixsgen ant task.
</para>
<para>
  Let us review the important parameters that you will need to change in <emphasis>build-jws2cixs.xml</emphasis>
  in order to adapt it to your needs:
</para>
<itemizedlist>
<listitem>
<para>
  Make sure the classpath setting for the jaxws2cixsgen task is correct.
  The fileset should point to the location where you installed LegStar.
</para>
<para>
  It is also important that the JAXB and Transformers previously generated be on the classpath.
</para>
</listitem>
<listitem>
<para>
  jaxws2cixsgen takes a series of file system locations as parameters. Follow the comments
  in the ant script to select the correct locations.
</para>
</listitem>
<listitem>
<para>
  The cixsJaxwsService element is where the actual Adapter is described. The name 
  and packageName parameters are up to you but must be valid java identifier and
  package name respectively.
</para>
</listitem>
<listitem>
<para>
  The cixsOperation element is there because you can implement more than one operation
  for a Service. You just need a different name (a valid java identifier) for each operation.
</para>
</listitem>
<listitem>
<para>
  The cicsProgramName parameter must exactly match an existing CICS program. The generated service
  will attempt to run that program.
</para>
</listitem>
<listitem>
<para>
  The input and output elements must refer to JAXB types and package names as generated by
  the COBOL Transformers generator. In the case of LSFILEAE, the JAXB type is Dfhcommarea
  for both input and output.
</para>
</listitem>
<listitem>
<para>
  Finally the webServiceParameters element is JAX-WS specific. It specifies the way the service
  will be exposed via WSDL.
</para>
</listitem>
</itemizedlist>
<para>
  For a complete list of options for the jaxws2cixsgen task, you can refer to
  <ulink url="http://www.legsem.com/legstar/legstar-cixsgen/legstar-jaxws-generator/apidocs/com/legstar/cixs/jaxws/gen/Jaxws2CixsGenerator.html">Jaxws2CixsGenerator</ulink>.
</para>
<para>
  After you run the script, you should get a new set of java classes which implement the JAX-WS endpoint.
</para>
<para>
  Besides the JAX-WS java classes, you will also find ant scripts that were generated to help you with
  deploying your endpoint. build-jar.xml bundles the classes in a jar archive that you could deploy to
  AXIS2 for instance. build-war.xml bundles a war file suitable for Sun's JAX-WS RI (Metro).
</para>
<para>
  Once deployed, you can use the Web Service with any SOAP client such as 
  <ulink url="http://www.soapui.org/">soapUI</ulink>.
</para>
</section>
