<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="jaxwsgen-using-ant-proxy">
<title>Mainframe Proxy generation</title>
<para>
  The final step in the process is to generate a Mainframe Proxy, which is a JAX-WS Client that
  responds to Mainframe requests and mediates the call to the target Web Service, for instance
  the Microsot LIVE Search Web Service.
</para>
<para>
  You can use the <emphasis>build-cixs2jws.xml</emphasis> ant script from the
  samples/quickstarts/proxy_ws_cultureinfo folder as your starting point.
</para>
<para>
  The sample script produces several artifacts and is primarily a single step script running
  the cixs2jaxwsgen ant task.
</para>
<para>
  Let us review the important parameters that you will need to change in <emphasis>build-cixs2jws.xml</emphasis>
  in order to adapt it to your needs:
</para>
<itemizedlist>
<listitem>
<para>
  Make sure the classpath setting for the cixs2jaxwsgen task is correct.
  The fileset should point to the location where you installed LegStar.
</para>
<para>
  It is also important that the JAXB and Transformers previously generated be on the classpath.
</para>
</listitem>
<listitem>
<para>
  cixs2jaxwsgen takes a series of file system locations as parameters. Follow the comments
  in the ant script to select the correct locations.
</para>
</listitem>
<listitem>
<para>
  The hostCharset parameter is your mainframe character set (for instance IBM01140).
  It must be one of the available java character sets. 
</para>
</listitem>
<listitem>
<para>
  The proxyTargetType parameter is either POJO or WEBSERVICE. In the case of LIVE Search
  it must be WEBSERVICE.
</para>
</listitem>
<listitem>
<para>
  The sampleCobolHttpClientType parameter is the type of COBOL sample that you would
  like to generate. This COBOL/CICS code uses HTTP to access the Proxy and therefore
  your choice depends on the APIs available to your CICS region. There are 3
  possibilities: DFHWBCLI, WEBAPI and LSHTTAPI.
</para>
</listitem>
<listitem>
<para>
  The cixsJaxwsService element is where the actual Proxy is described.
  The name parameter is up to you but must be valid java identifier.
</para>
</listitem>
<listitem>
<para>
  The cixsOperation element is there because you can implement more than one operation
  for a Service. You just need a different name (a valid java identifier) for each operation.
</para>
</listitem>
<listitem>
<para>
  The cicsProgramName parameter designates the sample COBOL client that will be generated.
</para>
</listitem>
<listitem>
<para>
  The input and output elements must refer to JAXB types and package names as generated by
  the COBOL Transformers generator. In the case of LIVE Search, the JAXB types are Search
  and SearchResponse on input and output respectively.
</para>
</listitem>
<listitem>
<para>
  Finally the webServiceTargetParameters element gives the datail on how to access the
  target Web Service. In the case of LIVE search, it should look like this:
</para>
<programlisting>
<![CDATA[
            <webServiceTargetParameters
                    wsdlUrl="http://soap.search.msn.com/webservices.asmx?wsdl"
                    wsdlTargetNamespace="http://schemas.microsoft.com/MSNSearch/2005/09/fex"
                    wsdlServiceName="MSNSearchService"
                    wsdlPortName="MSNSearchPort"
                />
]]>
</programlisting>
</listitem>
</itemizedlist>
<para>
  For a complete list of options for the cixs2jaxwsgen task, you can refer to
  <ulink url="http://www.legsem.com/legstar/legstar-cixsgen/legstar-jaxws-generator/apidocs/com/legstar/cixs/jaxws/gen/Cixs2JaxwsGenerator.html">Cixs2JaxwsGenerator</ulink>.
</para>
<para>
  After you run the script, you should get a new set of artifacts which implement a JAX-WS client.
</para>
<para>
  The Mainframe proxy is a Servlet to be deployed in a J2EE container.
  The implementation uses Sun's JAX-WS RI (Metro) as a Web Service client. The build-war.xml
  ant file that is generated allows you to bundle the servlet ready for deployment.
</para>
<para>
  The generator also creates a sample COBOL program that behaves as an HTTP client.
</para>
<para>
  The sample COBOL source contains TODO comments to help you locate where you should set values for the search
  request and where you can display the results. The LIVE search service requires a developer ID that you can
  get for free and enter in the AppID field.
</para>
<para>
  This is an example of code to set the search structures properly:
</para>
<programlisting>
           MOVE ZERO TO Flags--C OF COM-REQUEST.
           MOVE ZERO TO SortBy--C OF COM-REQUEST.
           MOVE ZERO TO ResultFields--C OF COM-REQUEST.
           MOVE ZERO TO R-string--C OF COM-REQUEST.
           MOVE 1 TO SourceRequest--C OF COM-REQUEST.
      *  You should specify your own Microsoft LIVE application ID
           MOVE '5588C3ACE949317B3ECAADDQ908611BDF5D8D5ZA'
             TO AppID OF COM-REQUEST.
           MOVE 'Mainframe' TO Query OF COM-REQUEST.
           MOVE 'en-US' TO CultureInfo OF COM-REQUEST.
           MOVE 'Moderate' to SafeSearch OF COM-REQUEST.
           MOVE ZERO TO Latitude OF COM-REQUEST.
           MOVE ZERO TO Longitude OF COM-REQUEST.
           MOVE ZERO TO Radius OF COM-REQUEST.
           MOVE 'Web' TO R-Source OF COM-REQUEST(1).
           MOVE ZERO TO Offset OF COM-REQUEST(1).
           MOVE 1 TO R-Count OF COM-REQUEST(1).
           MOVE SPACES TO FileType OF COM-REQUEST(1).
</programlisting>
<para>
  And these are lines to display the result:
</para>
<programlisting>
           STRING 'INVOKE-SERVICE success. First hit is '
                  DELIMITED BY SIZE
                  Description OF COM-REPLY(1, 1)
                  DELIMITED BY SIZE
                  INTO ERROR-MESSAGE.
           EXEC CICS SEND TEXT FROM(ERROR-MESSAGE) FREEKB END-EXEC.
           DISPLAY 'Response data length=' WBCLI-RESPONSE-BODY-LEN.

           DISPLAY 'SourceResponse--C ='
                    SourceResponse--C OF COM-REPLY.
           DISPLAY 'R-Source(1)=' R-Source OF COM-REPLY(1).
           DISPLAY 'Total(1)=' Total OF COM-REPLY(1).
           DISPLAY 'R-Title(1, 1)=' R-Title OF COM-REPLY(1, 1).
           DISPLAY 'Description(1, 1)='
                    Description OF COM-REPLY(1, 1).
</programlisting>
<para>
  After you add these lines of code, you should be able to upload the source onto your mainframe and get
  it compiled and defined to your CICS region. Please note that this program calls the CICS DFHWBCLI program
  defined in the CICS standard DFHWEB group. Alternatively, LegStar supports the new EXEC CICS WEB API or
  even supports older version of CICS with its own HTTP library. 
</para>
</section>
